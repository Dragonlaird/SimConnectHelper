using Microsoft.FlightSimulator.SimConnect;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MSFS_Sim.Common
{
    public class SimVarUnits
    {
        public static readonly Dictionary<string, SimVarDefinition> DefaultUnits = new Dictionary<string, SimVarDefinition>
        {
            {"AUTOPILOT AIRSPEED HOLD",new SimVarDefinition("AUTOPILOT AIRSPEED HOLD","Airspeed hold active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT AIRSPEED HOLD VAR",new SimVarDefinition("AUTOPILOT AIRSPEED HOLD VAR","Selected airspeed","knots",ConvertType("uif32"),true,true)},
            {"AUTOPILOT ALTITUDE LOCK",new SimVarDefinition("AUTOPILOT ALTITUDE LOCK","Altitude hole active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT ALTITUDE LOCK VAR",new SimVarDefinition("AUTOPILOT ALTITUDE LOCK VAR","Selected altitude","feet",null,true,true)},
            {"AUTOPILOT ALTITUDE SLOT INDEX",new SimVarDefinition("AUTOPILOT ALTITUDE SLOT INDEX","Index of the managed references","number",ConvertType("uint32"),true,false)},
            {"AUTOPILOT APPROACH HOLD",new SimVarDefinition("AUTOPILOT APPROACH HOLD","Approach mode active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT ATTITUDE HOLD",new SimVarDefinition("AUTOPILOT ATTITUDE HOLD","Attitude hold active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT AVAILABLE",new SimVarDefinition("AUTOPILOT AVAILABLE","Available flag","bool",ConvertType("bool"),true,false)},
            {"AUTOPILOT BACKCOURSE HOLD",new SimVarDefinition("AUTOPILOT BACKCOURSE HOLD","Back course mode active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT BANK HOLD",new SimVarDefinition("AUTOPILOT BANK HOLD","Bank Mode Active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT DISENGAGED",new SimVarDefinition("AUTOPILOT DISENGAGED","Whether or not the autopilot has been disengaged.","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT FLIGHT DIRECTOR ACTIVE",new SimVarDefinition("AUTOPILOT FLIGHT DIRECTOR ACTIVE","Flight director active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT FLIGHT DIRECTOR BANK",new SimVarDefinition("AUTOPILOT FLIGHT DIRECTOR BANK","Reference bank angle","radians",ConvertType("float64"),true,false)},
            {"AUTOPILOT FLIGHT DIRECTOR PITCH",new SimVarDefinition("AUTOPILOT FLIGHT DIRECTOR PITCH","Reference pitch angle","radians",ConvertType("float64"),true,false)},
            {"AUTOPILOT GLIDESLOPE HOLD",new SimVarDefinition("AUTOPILOT GLIDESLOPE HOLD","GS hold active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT HEADING LOCK",new SimVarDefinition("AUTOPILOT HEADING LOCK","Heading mode active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT HEADING LOCK DIR",new SimVarDefinition("AUTOPILOT HEADING LOCK DIR","Selected heading","degrees",ConvertType("angl16"),true,true)},
            {"AUTOPILOT HEADING SLOT INDEX",new SimVarDefinition("AUTOPILOT HEADING SLOT INDEX","Index of the managed references","number",ConvertType("uint32"),true,false)},
            {"AUTOPILOT MACH HOLD",new SimVarDefinition("AUTOPILOT MACH HOLD","Mach hold active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT MACH HOLD VAR",new SimVarDefinition("AUTOPILOT MACH HOLD VAR","Selected mach","number",ConvertType("uif32"),true,true)},
            {"AUTOPILOT MANAGED INDEX",new SimVarDefinition("AUTOPILOT MANAGED INDEX","Index of the managed references","number",ConvertType("uint32"),true,false)},
            {"AUTOPILOT MANAGED SPEED IN MACH",new SimVarDefinition("AUTOPILOT MANAGED SPEED IN MACH","Is the Managed Speed in Mach","bool",ConvertType("bool"),true,false)},
            {"AUTOPILOT MANAGED THROTTLE ACTIVE",new SimVarDefinition("AUTOPILOT MANAGED THROTTLE ACTIVE","Managed Autothrottle active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT MASTER",new SimVarDefinition("AUTOPILOT MASTER","On/off flag","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT MAX BANK",new SimVarDefinition("AUTOPILOT MAX BANK","True if autopilot max bank applied","radians",ConvertType("float64"),true,false)},
            {"AUTOPILOT NAV1 LOCK",new SimVarDefinition("AUTOPILOT NAV1 LOCK","True if autopilot nav1 lock applied","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT NAV SELECTED",new SimVarDefinition("AUTOPILOT NAV SELECTED","Index of Nav radio selected","number",null,true,false)},
            {"AUTOPILOT PITCH HOLD",new SimVarDefinition("AUTOPILOT PITCH HOLD","Set to True if the autopilot pitch hold has is engaged.","bool",ConvertType("bool"),true,false)},
            {"AUTOPILOT PITCH HOLD REF",new SimVarDefinition("AUTOPILOT PITCH HOLD REF","Current reference pitch","radians",ConvertType("float64"),true,false)},
            {"AUTOPILOT RPM HOLD",new SimVarDefinition("AUTOPILOT RPM HOLD","True if autopilot rpm hold applied","bool",ConvertType("bool"),true,false)},
            {"AUTOPILOT RPM HOLD VAR",new SimVarDefinition("AUTOPILOT RPM HOLD VAR","Selected rpm","number",ConvertType("uint32"),true,false)},
            {"AUTOPILOT RPM SLOT INDEX",new SimVarDefinition("AUTOPILOT RPM SLOT INDEX","Index of the managed references","number",ConvertType("uint32"),true,false)},
            {"AUTOPILOT SPEED SLOT INDEX",new SimVarDefinition("AUTOPILOT SPEED SLOT INDEX","Index of the managed references","number",ConvertType("uint32"),true,false)},
            {"AUTOPILOT TAKEOFF POWER ACTIVE",new SimVarDefinition("AUTOPILOT TAKEOFF POWER ACTIVE","Takeoff / Go Around power mode active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT THROTTLE ARM",new SimVarDefinition("AUTOPILOT THROTTLE ARM","Autothrottle armed","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT THROTTLE MAX THRUST",new SimVarDefinition("AUTOPILOT THROTTLE MAX THRUST","Autothrottle max thrust","float, percent.",ConvertType("float64"),false,true)},
            {"AUTOPILOT VERTICAL HOLD",new SimVarDefinition("AUTOPILOT VERTICAL HOLD","True if autopilot vertical hold applied","bool",ConvertType("bool"),true,false)},
            {"AUTOPILOT VERTICAL HOLD VAR",new SimVarDefinition("AUTOPILOT VERTICAL HOLD VAR","Selected vertical speed","feet/minute",null,true,true)},
            {"AUTOPILOT VS SLOT INDEX",new SimVarDefinition("AUTOPILOT VS SLOT INDEX","Index of the managed references","number",ConvertType("uint32"),true,false)},
            {"AUTOPILOT WING LEVELER",new SimVarDefinition("AUTOPILOT WING LEVELER","Wing leveler active","bool",ConvertType("bool"),true,true)},
            {"AUTOPILOT YAW DAMPER",new SimVarDefinition("AUTOPILOT YAW DAMPER","Yaw damper active","bool",ConvertType("bool"),true,true)},
            {"AUTOTHROTTLE ACTIVE",new SimVarDefinition("AUTOTHROTTLE ACTIVE","Auto-throttle active","bool",null,true,false)},
            {"COM SPACING MODE",new SimVarDefinition("COM SPACING MODE","Com [index] Radio Frequency step:","enum",null,false,false)},
            {"FLY BY WIRE ELAC FAILED",new SimVarDefinition("FLY BY WIRE ELAC FAILED","True if the Elevators and Ailerons computer has failed.","bool",ConvertType("bool"),true,false)},
            {"FLY BY WIRE ELAC SWITCH",new SimVarDefinition("FLY BY WIRE ELAC SWITCH","True if the fly by wire Elevators and Ailerons computer is on.","bool",ConvertType("bool"),true,false)},
            {"FLY BY WIRE FAC FAILED",new SimVarDefinition("FLY BY WIRE FAC FAILED","True if the Flight Augmentation computer has failed.","bool",ConvertType("bool"),true,false)},
            {"FLY BY WIRE FAC SWITCH",new SimVarDefinition("FLY BY WIRE FAC SWITCH","True if the fly by wire Flight Augmentation computer is on.","bool",ConvertType("bool"),true,false)},
            {"FLY BY WIRE SEC FAILED",new SimVarDefinition("FLY BY WIRE SEC FAILED","True if the Spoilers and Elevators computer has failed.","bool",ConvertType("bool"),true,false)},
            {"FLY BY WIRE SEC SWITCH",new SimVarDefinition("FLY BY WIRE SEC SWITCH","True if the fly by wire Spoilers and Elevators computer is on.","bool",ConvertType("bool"),true,false)},
            {"ADF ACTIVE FREQUENCY",new SimVarDefinition("ADF ACTIVE FREQUENCY","ADF frequency. Index of 1 or 2.","frequency adf bcd32",null,true,true)},
            {"ADF AVAILABLE",new SimVarDefinition("ADF AVAILABLE","True if ADF is available","bool",null,true,false)},
            {"ADF CARD",new SimVarDefinition("ADF CARD","ADF compass rose setting","degrees",ConvertType("uint32"),true,true)},
            {"ADF EXT FREQUENCY",new SimVarDefinition("ADF EXT FREQUENCY","Legacy, use ADF ACTIVE FREQUENCY","frequency bcd16",ConvertType("bcd16"),true,false)},
            {"ADF FREQUENCY",new SimVarDefinition("ADF FREQUENCY","Legacy, use ADF ACTIVE FREQUENCY","frequency bcd16",ConvertType("bcd16"),true,false)},
            {"ADF IDENT",new SimVarDefinition("ADF IDENT","ICAO code","string",null,true,false)},
            {"ADF LATLONALT",new SimVarDefinition("ADF LATLONALT","Returns the latitude, longitude and altitude of the station the radio equipment is currently tuned to, or zeros if the radio is not tuned to any ADF station. Index of 1 or 2 for ADF 1 and ADF 2.","simconnect_data_latlonaltstructure",null,true,false)},
            {"ADF NAME",new SimVarDefinition("ADF NAME","Descriptive name","string",null,true,false)},
            {"ADF RADIAL",new SimVarDefinition("ADF RADIAL","Current direction from NDB station","degrees",ConvertType("float64"),true,false)},
            {"ADF SIGNAL",new SimVarDefinition("ADF SIGNAL","Signal strength","number",ConvertType("float64"),true,false)},
            {"ADF SOUND",new SimVarDefinition("ADF SOUND","ADF audio flag. Index of 0 or 1.","bool",ConvertType("float64"),true,true)},
            {"ADF STANDBY FREQUENCY",new SimVarDefinition("ADF STANDBY FREQUENCY","ADF standby frequency","hz",null,true,false)},
            {"AUDIO PANEL VOLUME",new SimVarDefinition("AUDIO PANEL VOLUME","The Volume of the Audio Panel.","float, percent.",ConvertType("float64"),true,false)},
            {"AVIONICS MASTER SWITCH",new SimVarDefinition("AVIONICS MASTER SWITCH","Avionics switch state","bool",ConvertType("bool"),true,true)},
            {"COM ACTIVE FREQUENCY",new SimVarDefinition("COM ACTIVE FREQUENCY","Com frequency. Index is 1 or 2.","frequency bcd16",ConvertType("bcd16"),true,true)},
            {"COM AVAILABLE",new SimVarDefinition("COM AVAILABLE","True if either COM1 or COM2 is available","bool",null,true,false)},
            {"COM RECEIVE ALL",new SimVarDefinition("COM RECEIVE ALL","Toggles all COM radios to receive on","bool",ConvertType("float64"),true,false)},
            {"COM RECIEVE ALL",new SimVarDefinition("COM RECIEVE ALL","Flag if all Coms receiving","bool",null,true,true)},
            {"COM STANDBY FREQUENCY",new SimVarDefinition("COM STANDBY FREQUENCY","Com standby frequency. Index is 1 or 2.","frequency bcd16",ConvertType("bcd16"),true,true)},
            {"COM STATUS",new SimVarDefinition("COM STATUS","Radio status flag :[index]","enum",null,true,false)},
            {"COM TEST",new SimVarDefinition("COM TEST","Enter an index of 1 or 2. True if the COM system is working.","bool",ConvertType("bool"),true,false)},
            {"COM TRANSMIT",new SimVarDefinition("COM TRANSMIT","Audio panel com transmit state. Index of 1 or 2.","bool",ConvertType("float64"),true,true)},
            {"COPILOT TRANSMITTER TYPE",new SimVarDefinition("COPILOT TRANSMITTER TYPE","On which channel the copilot is transmitting. 0 = COM1 1 = COM2 2 = COM3 3 = TEL 4 = NONE","enum",ConvertType("enum"),true,false)},
            {"COPILOT TRANSMITTING",new SimVarDefinition("COPILOT TRANSMITTING","Whether or not the copilot is transmitting.","bool",ConvertType("bool"),true,false)},
            {"DME SOUND",new SimVarDefinition("DME SOUND","DME audio flag","bool",ConvertType("float64"),true,true)},
            {"GPS APPROACH APPROACH INDEX",new SimVarDefinition("GPS APPROACH APPROACH INDEX","Index of approach for given airport","number",null,true,false)},
            {"GPS APPROACH APPROACH TYPE",new SimVarDefinition("GPS APPROACH APPROACH TYPE","Approach type :[index]","enum",null,true,false)},
            {"GPS APPROACH IS FINAL",new SimVarDefinition("GPS APPROACH IS FINAL","Is approach transition final approach segment","bool",null,true,false)},
            {"GPS APPROACH IS MISSED",new SimVarDefinition("GPS APPROACH IS MISSED","Is approach segment missed approach segment","bool",null,true,false)},
            {"GPS APPROACH IS WP RUNWAY",new SimVarDefinition("GPS APPROACH IS WP RUNWAY","Waypoint is the runway","bool",null,true,false)},
            {"GPS APPROACH MODE",new SimVarDefinition("GPS APPROACH MODE","Sub mode within approach mode :[index]","enum",null,true,false)},
            {"GPS APPROACH SEGMENT TYPE",new SimVarDefinition("GPS APPROACH SEGMENT TYPE","Segment type within approach :[index]","enum",null,true,false)},
            {"GPS APPROACH TIMEZONE DEVIATION",new SimVarDefinition("GPS APPROACH TIMEZONE DEVIATION","Deviation of local time from GMT","seconds",null,true,false)},
            {"GPS APPROACH TRANSITION INDEX",new SimVarDefinition("GPS APPROACH TRANSITION INDEX","Index of approach transition","number",null,true,false)},
            {"GPS APPROACH WP COUNT",new SimVarDefinition("GPS APPROACH WP COUNT","Number of waypoints","number",null,true,false)},
            {"GPS APPROACH WP INDEX",new SimVarDefinition("GPS APPROACH WP INDEX","Index of current waypoint","number",null,true,false)},
            {"GPS APPROACH WP TYPE",new SimVarDefinition("GPS APPROACH WP TYPE","Waypoint type within approach mode :[index]","enum",null,true,false)},
            {"GPS COURSE TO STEER",new SimVarDefinition("GPS COURSE TO STEER","Suggested heading to steer (for autopilot)","radians",null,true,false)},
            {"GPS DRIVES NAV1",new SimVarDefinition("GPS DRIVES NAV1","GPS is driving Nav 1 indicator","bool",ConvertType("bool"),true,true)},
            {"GPS ETA",new SimVarDefinition("GPS ETA","Estimated time of arrival at destination","seconds",null,true,false)},
            {"GPS ETE",new SimVarDefinition("GPS ETE","Estimated time en route to destination","seconds",null,true,false)},
            {"GPS FLIGHT PLAN WP COUNT",new SimVarDefinition("GPS FLIGHT PLAN WP COUNT","Number of waypoints","number",null,true,false)},
            {"GPS FLIGHT PLAN WP INDEX",new SimVarDefinition("GPS FLIGHT PLAN WP INDEX","Index of waypoint","number",null,true,false)},
            {"GPS GROUND MAGNETIC TRACK",new SimVarDefinition("GPS GROUND MAGNETIC TRACK","Current magnetic ground track","radians",ConvertType("float64"),true,false)},
            {"GPS GROUND SPEED",new SimVarDefinition("GPS GROUND SPEED","Current ground speed","meters per second",ConvertType("float64"),true,false)},
            {"GPS GROUND TRUE HEADING",new SimVarDefinition("GPS GROUND TRUE HEADING","Current true heading","radians",ConvertType("float64"),true,false)},
            {"GPS GROUND TRUE TRACK",new SimVarDefinition("GPS GROUND TRUE TRACK","Current true ground track","radians",null,true,false)},
            {"GPS IS ACTIVE FLIGHT PLAN",new SimVarDefinition("GPS IS ACTIVE FLIGHT PLAN","Flight plan mode active","bool",null,true,false)},
            {"GPS IS ACTIVE WAY POINT",new SimVarDefinition("GPS IS ACTIVE WAY POINT","Waypoint mode active","bool",null,true,false)},
            {"GPS IS ACTIVE WP LOCKED",new SimVarDefinition("GPS IS ACTIVE WP LOCKED","Is switching to next waypoint locked","bool",null,true,false)},
            {"GPS IS APPROACH ACTIVE",new SimVarDefinition("GPS IS APPROACH ACTIVE","Is approach mode active","bool",null,true,false)},
            {"GPS IS APPROACH LOADED",new SimVarDefinition("GPS IS APPROACH LOADED","Is approach loaded","bool",null,true,false)},
            {"GPS IS ARRIVED",new SimVarDefinition("GPS IS ARRIVED","Is flight plan destination reached","bool",null,true,false)},
            {"GPS IS DIRECTTO FLIGHTPLAN",new SimVarDefinition("GPS IS DIRECTTO FLIGHTPLAN","Is Direct To Waypoint mode active","bool",null,true,false)},
            {"GPS MAGVAR",new SimVarDefinition("GPS MAGVAR","Current GPS magnetic variation","radians",ConvertType("float64"),true,false)},
            {"GPS POSITION ALT",new SimVarDefinition("GPS POSITION ALT","Current GPS altitude","meters",ConvertType("float64"),true,false)},
            {"GPS POSITION LAT",new SimVarDefinition("GPS POSITION LAT","Current GPS latitude","degrees",ConvertType("float64"),true,false)},
            {"GPS POSITION LON",new SimVarDefinition("GPS POSITION LON","Current GPS longitude","degrees",ConvertType("float64"),true,false)},
            {"GPS TARGET ALTITUDE",new SimVarDefinition("GPS TARGET ALTITUDE","Altitude of GPS target","meters",null,true,false)},
            {"GPS TARGET DISTANCE",new SimVarDefinition("GPS TARGET DISTANCE","Distance to target","meters",null,true,false)},
            {"GPS VERTICAL ANGLE",new SimVarDefinition("GPS VERTICAL ANGLE","Glidepath in degrees","degrees",null,true,false)},
            {"GPS VERTICAL ANGLE ERROR",new SimVarDefinition("GPS VERTICAL ANGLE ERROR","Vertical error in degrees from GlidePath","degrees",null,true,false)},
            {"GPS VERTICAL ERROR",new SimVarDefinition("GPS VERTICAL ERROR","Vertical deviation in meters from GlidePath","meters",null,true,false)},
            {"GPS WP BEARING",new SimVarDefinition("GPS WP BEARING","Magnetic bearing to waypoint","radians",ConvertType("float64"),true,false)},
            {"GPS WP CROSS TRK",new SimVarDefinition("GPS WP CROSS TRK","Cross track distance","meters",ConvertType("float64"),true,false)},
            {"GPS WP DESIRED TRACK",new SimVarDefinition("GPS WP DESIRED TRACK","Desired track to waypoint","radians",ConvertType("float64"),true,false)},
            {"GPS WP DISTANCE",new SimVarDefinition("GPS WP DISTANCE","Distance to waypoint","meters",ConvertType("float64"),true,false)},
            {"GPS WP ETA",new SimVarDefinition("GPS WP ETA","Estimated time of arrival at waypoint","seconds",null,true,false)},
            {"GPS WP ETE",new SimVarDefinition("GPS WP ETE","Estimated time en route to waypoint","seconds",null,true,false)},
            {"GPS WP NEXT ALT",new SimVarDefinition("GPS WP NEXT ALT","Altitude of next waypoint","meters",ConvertType("float64"),true,false)},
            {"GPS WP NEXT LAT",new SimVarDefinition("GPS WP NEXT LAT","Latitude of next waypoint","degrees",ConvertType("float64"),true,false)},
            {"GPS WP NEXT LON",new SimVarDefinition("GPS WP NEXT LON","Longitude of next waypoint","degrees",ConvertType("float64"),true,false)},
            {"GPS WP PREV ALT",new SimVarDefinition("GPS WP PREV ALT","Altitude of previous waypoint","meters",ConvertType("float64"),true,false)},
            {"GPS WP PREV LAT",new SimVarDefinition("GPS WP PREV LAT","Latitude of previous waypoint","degrees",ConvertType("float64"),true,false)},
            {"GPS WP PREV LON",new SimVarDefinition("GPS WP PREV LON","Longitude of previous waypoint","degrees",ConvertType("float64"),true,false)},
            {"GPS WP PREV VALID",new SimVarDefinition("GPS WP PREV VALID","Is previous waypoint valid (i.e. current waypoint is not the first waypoint)","bool",null,true,false)},
            {"GPS WP TRACK ANGLE ERROR",new SimVarDefinition("GPS WP TRACK ANGLE ERROR","Tracking angle error to waypoint","radians",null,true,false)},
            {"GPS WP TRUE BEARING",new SimVarDefinition("GPS WP TRUE BEARING","True bearing to waypoint","radians",ConvertType("float64"),true,false)},
            {"GPS WP TRUE REQ HDG",new SimVarDefinition("GPS WP TRUE REQ HDG","Required true heading to waypoint","radians",ConvertType("float64"),true,false)},
            {"GPS WP VERTICAL SPEED",new SimVarDefinition("GPS WP VERTICAL SPEED","Vertical speed to waypoint","meters per second",null,true,false)},
            {"HSI BEARING",new SimVarDefinition("HSI BEARING","If the GPS DRIVES NAV1 variable is true and the HSI BEARING VALID variable is true, this variable contains the HSI needle bearing.If the GPS DRIVES NAV1 variable is false and the HSI BEARING VALID variable is true, this variable contains theADF1 frequency.","degrees",ConvertType("float64"),true,false)},
            {"HSI BEARING VALID",new SimVarDefinition("HSI BEARING VALID","This will return true if the HSI BEARING variable contains valid data.","bool",ConvertType("bool"),true,false)},
            {"HSI CDI NEEDLE",new SimVarDefinition("HSI CDI NEEDLE","Needle deflection (+/- 127)","number",null,true,false)},
            {"HSI CDI NEEDLE VALID",new SimVarDefinition("HSI CDI NEEDLE VALID","Signal valid","bool",ConvertType("bool"),true,false)},
            {"HSI DISTANCE",new SimVarDefinition("HSI DISTANCE","DME/GPS distance","nautical miles",ConvertType("float64"),true,false)},
            {"HSI GSI NEEDLE",new SimVarDefinition("HSI GSI NEEDLE","Needle deflection (+/- 119)","number",null,true,false)},
            {"HSI GSI NEEDLE VALID",new SimVarDefinition("HSI GSI NEEDLE VALID","Signal valid","bool",ConvertType("bool"),true,false)},
            {"HSI HAS LOCALIZER",new SimVarDefinition("HSI HAS LOCALIZER","Station is a localizer","bool",ConvertType("bool"),true,false)},
            {"HSI SPEED",new SimVarDefinition("HSI SPEED","DME/GPS speed","knots",ConvertType("float64"),true,false)},
            {"HSI TF FLAGS",new SimVarDefinition("HSI TF FLAGS","Nav TO/FROM flag:[index]","enum",null,true,false)},
            {"INNER MARKER",new SimVarDefinition("INNER MARKER","Inner marker state","bool",null,false,false)},
            {"INNER MARKER LATLONALT",new SimVarDefinition("INNER MARKER LATLONALT","Returns the latitude, longitude and altitude of the inner marker of an approach to a runway, if the aircraft is within the required proximity, otherwise it will return zeros.","simconnect_data_latlonaltstructure",null,true,false)},
            {"INTERCOM MODE",new SimVarDefinition("INTERCOM MODE","Intercom Mode : 0 = ISO 1 = ALL 2 = CREW","enum",ConvertType("enum"),true,false)},
            {"INTERCOM SYSTEM ACTIVE",new SimVarDefinition("INTERCOM SYSTEM ACTIVE","Whether or not the intercom system is active.","bool",ConvertType("bool"),true,false)},
            {"MARKER BEACON SENSITIVITY HIGH",new SimVarDefinition("MARKER BEACON SENSITIVITY HIGH","Whether or not the Marker Beacon is in High Sensitivity mode.","bool",ConvertType("bool"),true,false)},
            {"MARKER BEACON STATE",new SimVarDefinition("MARKER BEACON STATE","Marker beacon state:[index]","enum",ConvertType("float64"),false,false)},
            {"MARKER BEACON TEST MUTE",new SimVarDefinition("MARKER BEACON TEST MUTE","Whether or not the Marker Beacon is in Test/Mute mode.","bool",ConvertType("bool"),true,false)},
            {"MARKER SOUND",new SimVarDefinition("MARKER SOUND","Marker audio flag","bool",ConvertType("float64"),true,false)},
            {"MIDDLE MARKER",new SimVarDefinition("MIDDLE MARKER","Middle marker state","bool",null,false,false)},
            {"MIDDLE MARKER LATLONALT",new SimVarDefinition("MIDDLE MARKER LATLONALT","Returns the latitude, longitude and altitude of the middle marker.","simconnect_data_latlonaltstructure",null,true,false)},
            {"NAV ACTIVE FREQUENCY",new SimVarDefinition("NAV ACTIVE FREQUENCY","Nav active frequency. Index is 1 or 2.","mhz",ConvertType("bcd16"),true,true)},
            {"NAV AVAILABLE",new SimVarDefinition("NAV AVAILABLE","Flag if Nav equipped on aircraft","bool",ConvertType("bool"),true,false)},
            {"NAV BACK COURSE FLAGS",new SimVarDefinition("NAV BACK COURSE FLAGS","Returns the following bit flags:[index]","flags",ConvertType("flags8"),true,false)},
            {"NAV CDI",new SimVarDefinition("NAV CDI","CDI needle deflection (+/- 127)","number",ConvertType("sint8"),true,false)},
            {"NAV CLOSE DME",new SimVarDefinition("NAV CLOSE DME","DME distance","nautical miles",null,true,false)},
            {"NAV CLOSE FREQUENCY",new SimVarDefinition("NAV CLOSE FREQUENCY","Closest Localizer course frequency","hz",null,true,false)},
            {"NAV CLOSE IDENT",new SimVarDefinition("NAV CLOSE IDENT","ICAO code","string",null,true,false)},
            {"NAV CLOSE LOCALIZER",new SimVarDefinition("NAV CLOSE LOCALIZER","Closest Localizer course heading","degrees",null,true,false)},
            {"NAV CLOSE NAME",new SimVarDefinition("NAV CLOSE NAME","Descriptive name","string",null,true,false)},
            {"NAV CODES",new SimVarDefinition("NAV CODES","Returns bit flags with the following meaning:[index]","flags",ConvertType("flags8"),true,false)},
            {"NAV DME",new SimVarDefinition("NAV DME","DME distance","nautical miles",null,true,false)},
            {"NAV DMESPEED",new SimVarDefinition("NAV DMESPEED","DME speed","knots",null,true,false)},
            {"NAV DME LATLONALT",new SimVarDefinition("NAV DME LATLONALT","Returns the DME station.","simconnect_data_latlonaltstructure",null,true,false)},
            {"NAV FREQUENCY",new SimVarDefinition("NAV FREQUENCY","Localizer course frequency","hz",null,true,false)},
            {"NAV GLIDE SLOPE",new SimVarDefinition("NAV GLIDE SLOPE","The glide slope gradient.","number",null,true,false)},
            {"NAV GLIDE SLOPE ERROR",new SimVarDefinition("NAV GLIDE SLOPE ERROR","Difference between current position and glideslope angle. Note that this provides 32 bit floating point precision, rather than the 8 bit integer precision of NAV GSI.","degrees",null,true,false)},
            {"NAV GSI",new SimVarDefinition("NAV GSI","Glideslope needle deflection (+/- 119). Note that this provides only 8 bit precision, whereas NAV GLIDE SLOPE ERROR provides 32 bit floating point precision.","number",ConvertType("sint8"),true,false)},
            {"NAV GS FLAG",new SimVarDefinition("NAV GS FLAG","Glideslope flag","bool",ConvertType("bool8"),true,false)},
            {"NAV GS LATLONALT",new SimVarDefinition("NAV GS LATLONALT","Returns the glide slope.","simconnect_data_latlonaltstructure",null,true,false)},
            {"NAV HAS CLOSE DME",new SimVarDefinition("NAV HAS CLOSE DME","Flag if found a close station with a DME","bool",null,true,false)},
            {"NAV HAS CLOSE LOCALIZER",new SimVarDefinition("NAV HAS CLOSE LOCALIZER","Flag if found a close localizer station","bool",null,true,false)},
            {"NAV HAS DME",new SimVarDefinition("NAV HAS DME","Flag if tuned station has a DME","bool",null,true,false)},
            {"NAV HAS GLIDE SLOPE",new SimVarDefinition("NAV HAS GLIDE SLOPE","Flag if tuned station has a glideslope","bool",null,true,false)},
            {"NAV HAS LOCALIZER",new SimVarDefinition("NAV HAS LOCALIZER","Flag if tuned station is a localizer","bool",null,true,false)},
            {"NAV HAS NAV",new SimVarDefinition("NAV HAS NAV","Flag if Nav has signal","bool",null,true,false)},
            {"NAV IDENT",new SimVarDefinition("NAV IDENT","ICAO code","string",null,true,false)},
            {"NAV LOCALIZER",new SimVarDefinition("NAV LOCALIZER","Localizer course heading","degrees",null,true,false)},
            {"NAV MAGVAR",new SimVarDefinition("NAV MAGVAR","Magnetic variation of tuned nav station","degrees",ConvertType("uint16"),true,false)},
            {"NAV NAME",new SimVarDefinition("NAV NAME","Descriptive name","string",null,true,false)},
            {"NAV OBS",new SimVarDefinition("NAV OBS","OBS setting. Index of 1 or 2.","degrees",ConvertType("uint16"),true,true)},
            {"NAV RADIAL",new SimVarDefinition("NAV RADIAL","Radial that aircraft is on","degrees",ConvertType("uint16"),true,false)},
            {"NAV RADIAL ERROR",new SimVarDefinition("NAV RADIAL ERROR","Difference between current radial and OBS tuned radial","degrees",null,true,false)},
            {"NAV RAW GLIDE SLOPE",new SimVarDefinition("NAV RAW GLIDE SLOPE","Glide slope angle","degrees",null,true,false)},
            {"NAV RELATIVE BEARING TO STATION",new SimVarDefinition("NAV RELATIVE BEARING TO STATION","Relative bearing to station","degrees",ConvertType("float64"),true,false)},
            {"NAV SIGNAL",new SimVarDefinition("NAV SIGNAL","Nav signal strength","number",ConvertType("uint16"),true,false)},
            {"NAV SOUND",new SimVarDefinition("NAV SOUND","Nav audio flag. Index of 1 or 2.","bool",ConvertType("float64"),true,true)},
            {"NAV STANDBY FREQUENCY",new SimVarDefinition("NAV STANDBY FREQUENCY","Nav standby frequency. Index is 1 or 2.","mhz",ConvertType("bcd16"),true,true)},
            {"NAV TOFROM",new SimVarDefinition("NAV TOFROM","Nav TO/FROM flag:[index]","enum",ConvertType("enum8"),true,false)},
            {"NAV VOR DISTANCE",new SimVarDefinition("NAV VOR DISTANCE","Distance of the VOR beacon","meters",null,true,false)},
            {"NAV VOR LATLONALT",new SimVarDefinition("NAV VOR LATLONALT","Returns the VOR station latitude, longitude and altitude.","simconnect_data_latlonaltstructure",null,true,false)},
            {"OUTER MARKER",new SimVarDefinition("OUTER MARKER","Outer marker state","bool",null,false,false)},
            {"OUTER MARKER LATLONALT",new SimVarDefinition("OUTER MARKER LATLONALT","Returns the latitude, longitude and altitude of the outer marker.","simconnect_data_latlonaltstructure",null,true,false)},
            {"PILOT TRANSMITTER TYPE",new SimVarDefinition("PILOT TRANSMITTER TYPE","On which channel the pilot is transmitting. 0 = COM1 1 = COM2 2 = COM3 3 = TEL 4 = NONE","enum",ConvertType("enum"),true,false)},
            {"PILOT TRANSMITTING",new SimVarDefinition("PILOT TRANSMITTING","Whether or not the pilot is transmitting.","bool",ConvertType("bool"),true,false)},
            {"SELECTED DME",new SimVarDefinition("SELECTED DME","Selected DME","number",ConvertType("enum"),true,true)},
            {"SPEAKER ACTIVE",new SimVarDefinition("SPEAKER ACTIVE","Whether or not the speaker is active.","bool",ConvertType("bool"),true,false)},
            {"TRANSPONDER AVAILABLE",new SimVarDefinition("TRANSPONDER AVAILABLE","True if a transponder is available","bool",null,true,false)},
            {"TRANSPONDER CODE",new SimVarDefinition("TRANSPONDER CODE","4-digit code","bco16",ConvertType("bco16"),true,true)},
            {"TRANSPONDER STATE",new SimVarDefinition("TRANSPONDER STATE","Transponder State:[index]","enum",null,false,false)},
            {"AILERON AVERAGE DEFLECTION",new SimVarDefinition("AILERON AVERAGE DEFLECTION","Angle deflection","radians",ConvertType("float64"),true,false)},
            {"AILERON LEFT DEFLECTION",new SimVarDefinition("AILERON LEFT DEFLECTION","Angle deflection","radians",null,true,false)},
            {"AILERON LEFT DEFLECTION PCT",new SimVarDefinition("AILERON LEFT DEFLECTION PCT","Percent deflection","percent over 100",null,true,false)},
            {"AILERON POSITION",new SimVarDefinition("AILERON POSITION","Percent aileron input left/right","position (-16k to 0) -16k = full left",ConvertType("sint16"),false,false)},
            {"AILERON RIGHT DEFLECTION",new SimVarDefinition("AILERON RIGHT DEFLECTION","Angle deflection","radians",null,true,false)},
            {"AILERON RIGHT DEFLECTION PCT",new SimVarDefinition("AILERON RIGHT DEFLECTION PCT","Percent deflection","percent over 100",null,true,false)},
            {"AILERON TRIM",new SimVarDefinition("AILERON TRIM","Angle deflection","radians",ConvertType("float64"),true,false)},
            {"AILERON TRIM PCT",new SimVarDefinition("AILERON TRIM PCT","The trim position of the ailerons. Zero is fully retracted.","float. percent over 100",ConvertType("float64"),false,false)},
            {"ALTERNATE STATIC SOURCE OPEN",new SimVarDefinition("ALTERNATE STATIC SOURCE OPEN","Alternate static air source","bool",ConvertType("bool"),true,true)},
            {"BRAKE INDICATOR",new SimVarDefinition("BRAKE INDICATOR","Brake on indication","position (0 to 16k) 0 = off, 16k full",ConvertType("uint16"),true,false)},
            {"BRAKE LEFT POSITION",new SimVarDefinition("BRAKE LEFT POSITION","Percent left brake","position (0 to 32k) 0 = off, 32k full",ConvertType("sint32"),false,false)},
            {"BRAKE LEFT POSITION EX1",new SimVarDefinition("BRAKE LEFT POSITION EX1","Percent left brake, ignoring the effect of the parking brake.","position (0 to 32k) 0 = off, 32k full",ConvertType("sint32"),false,false)},
            {"BRAKE PARKING INDICATOR",new SimVarDefinition("BRAKE PARKING INDICATOR","Parking brake indicator","bool",null,true,false)},
            {"BRAKE PARKING POSITION",new SimVarDefinition("BRAKE PARKING POSITION","Parking brake on","position (0 to 32k) 0 = off, 32k full",ConvertType("uint16"),false,true)},
            {"BRAKE RIGHT POSITION",new SimVarDefinition("BRAKE RIGHT POSITION","Percent right brake","position (0 to 32k) 0 = off, 32k full",ConvertType("sint32"),false,false)},
            {"BRAKE RIGHT POSITION EX1",new SimVarDefinition("BRAKE RIGHT POSITION EX1","Percent right brake, ignoring the effect of the parking brake.","position (0 to 32k) 0 = off, 32k full",ConvertType("sint32"),false,false)},
            {"ELEVATOR DEFLECTION",new SimVarDefinition("ELEVATOR DEFLECTION","Angle deflection","radians",ConvertType("float64"),true,false)},
            {"ELEVATOR DEFLECTION PCT",new SimVarDefinition("ELEVATOR DEFLECTION PCT","Percent deflection","percent over 100",null,true,false)},
            {"ELEVATOR POSITION",new SimVarDefinition("ELEVATOR POSITION","Percent elevator input deflection","position (-16k to 0) -16k = full down",ConvertType("sint16"),false,false)},
            {"ELEVATOR TRIM INDICATOR",new SimVarDefinition("ELEVATOR TRIM INDICATOR","Percent elevator trim (for indication)","position (-16k to 0) -16k = full down",ConvertType("sint16"),true,false)},
            {"ELEVATOR TRIM PCT",new SimVarDefinition("ELEVATOR TRIM PCT","Percent elevator trim","percent over 100",null,true,false)},
            {"ELEVATOR TRIM POSITION",new SimVarDefinition("ELEVATOR TRIM POSITION","Elevator trim deflection","radians",ConvertType("float64"),false,true)},
            {"FLAPS AVAILABLE",new SimVarDefinition("FLAPS AVAILABLE","True if flaps available","bool",ConvertType("bool"),true,false)},
            {"FLAPS HANDLE INDEX",new SimVarDefinition("FLAPS HANDLE INDEX","Index of current flap position","number",null,false,true)},
            {"FLAPS HANDLE PERCENT",new SimVarDefinition("FLAPS HANDLE PERCENT","Percent flap handle extended","percent over 100",ConvertType("uint32"),true,false)},
            {"FLAPS NUM HANDLE POSITIONS",new SimVarDefinition("FLAPS NUM HANDLE POSITIONS","Number of flap positions","number",null,true,false)},
            {"FLAP DAMAGE BY SPEED",new SimVarDefinition("FLAP DAMAGE BY SPEED","True if flaps are damaged by excessive speed","bool",null,true,false)},
            {"FLAP SPEED EXCEEDED",new SimVarDefinition("FLAP SPEED EXCEEDED","True if safe speed limit for flaps exceeded","bool",null,true,false)},
            {"FOLDING WING HANDLE POSITION",new SimVarDefinition("FOLDING WING HANDLE POSITION","True if the folding wing handle is engaged.","bool",ConvertType("float64"),true,false)},
            {"FUEL DUMP SWITCH",new SimVarDefinition("FUEL DUMP SWITCH","If true the aircraft is dumping fuel at the rate set in the configuration file.","bool",ConvertType("bool"),true,false)},
            {"LEADING EDGE FLAPS LEFT ANGLE",new SimVarDefinition("LEADING EDGE FLAPS LEFT ANGLE","Angle left leading edge flap extended. Use LEADING EDGE FLAPS LEFT PERCENT to set a value.","radians",null,true,false)},
            {"LEADING EDGE FLAPS LEFT INDEX",new SimVarDefinition("LEADING EDGE FLAPS LEFT INDEX","Index of left leading edge flap position","number",null,true,true)},
            {"LEADING EDGE FLAPS LEFT PERCENT",new SimVarDefinition("LEADING EDGE FLAPS LEFT PERCENT","Percent left leading edge flap extended","percent over 100",null,false,false)},
            {"LEADING EDGE FLAPS RIGHT ANGLE",new SimVarDefinition("LEADING EDGE FLAPS RIGHT ANGLE","Angle right leading edge flap extended. Use LEADING EDGE FLAPS RIGHT PERCENT to set a value.","radians",null,true,false)},
            {"LEADING EDGE FLAPS RIGHT INDEX",new SimVarDefinition("LEADING EDGE FLAPS RIGHT INDEX","Index of right leading edge flap position","number",null,true,true)},
            {"LEADING EDGE FLAPS RIGHT PERCENT",new SimVarDefinition("LEADING EDGE FLAPS RIGHT PERCENT","Percent right leading edge flap extended","percent over 100",null,false,false)},
            {"RUDDER DEFLECTION",new SimVarDefinition("RUDDER DEFLECTION","Angle deflection","radians",ConvertType("float64"),true,false)},
            {"RUDDER DEFLECTION PCT",new SimVarDefinition("RUDDER DEFLECTION PCT","Percent deflection","percent over 100",null,true,false)},
            {"RUDDER PEDAL POSITION",new SimVarDefinition("RUDDER PEDAL POSITION","Percent rudder pedal deflection (for animation)","position (-16k to 0) -16k = left pedal pushed full in",ConvertType("sint16"),false,false)},
            {"RUDDER POSITION",new SimVarDefinition("RUDDER POSITION","Percent rudder input deflection","position (-16k to 0) -16k = full left",ConvertType("sint16"),false,false)},
            {"RUDDER TRIM",new SimVarDefinition("RUDDER TRIM","Angle deflection","radians",ConvertType("float64"),true,false)},
            {"RUDDER TRIM PCT",new SimVarDefinition("RUDDER TRIM PCT","The trim position of the rudder. Zero is no trim.","float. percent over 100",ConvertType("float64"),false,false)},
            {"SPOILERS ARMED",new SimVarDefinition("SPOILERS ARMED","Auto-spoilers armed","bool",ConvertType("bool32"),true,true)},
            {"SPOILERS HANDLE POSITION",new SimVarDefinition("SPOILERS HANDLE POSITION","Spoiler handle position","percent over 100 or position (16k = down, 0 = up)",ConvertType("uint32"),false,true)},
            {"SPOILERS LEFT POSITION",new SimVarDefinition("SPOILERS LEFT POSITION","Percent left spoiler deflected","percent over 100 or position (0 = retracted, 16k fully extended)",ConvertType("uint32"),true,false)},
            {"SPOILERS RIGHT POSITION",new SimVarDefinition("SPOILERS RIGHT POSITION","Percent right spoiler deflected","percent over 100 or position (0 = retracted, 16k fully extended)",ConvertType("uint32"),true,false)},
            {"TRAILING EDGE FLAPS LEFT ANGLE",new SimVarDefinition("TRAILING EDGE FLAPS LEFT ANGLE","Angle left trailing edge flap extended. Use TRAILING EDGE FLAPS LEFT PERCENT to set a value.","radians",ConvertType("float64"),true,false)},
            {"TRAILING EDGE FLAPS LEFT INDEX",new SimVarDefinition("TRAILING EDGE FLAPS LEFT INDEX","Index of left trailing edge flap position","number",null,true,true)},
            {"TRAILING EDGE FLAPS LEFT PERCENT",new SimVarDefinition("TRAILING EDGE FLAPS LEFT PERCENT","Percent left trailing edge flap extended","percent over 100",ConvertType("uint32"),false,false)},
            {"TRAILING EDGE FLAPS RIGHT ANGLE",new SimVarDefinition("TRAILING EDGE FLAPS RIGHT ANGLE","Angle right trailing edge flap extended. Use TRAILING EDGE FLAPS RIGHT PERCENT to set a value.","radians",ConvertType("float64"),true,false)},
            {"TRAILING EDGE FLAPS RIGHT INDEX",new SimVarDefinition("TRAILING EDGE FLAPS RIGHT INDEX","Index of right trailing edge flap position","number",null,true,true)},
            {"TRAILING EDGE FLAPS RIGHT PERCENT",new SimVarDefinition("TRAILING EDGE FLAPS RIGHT PERCENT","Percent right trailing edge flap extended","percent over 100",ConvertType("uint32"),false,false)},
            {"YOKE X POSITION",new SimVarDefinition("YOKE X POSITION","Percent control deflection left/right (for animation)","position (-16k to 0) -16k =",ConvertType("sint16"),false,false)},
            {"YOKE X POSITION WITH AP",new SimVarDefinition("YOKE X POSITION WITH AP","Percent control deflection left/right (for animation). Also includes AP’s inputs.","position (-16k to 0) -16k =",null,true,false)},
            {"YOKE Y POSITION",new SimVarDefinition("YOKE Y POSITION","Percent control deflection fore/aft (for animation)","position (-16k to 0) -16k = yoke fully pushed in",ConvertType("sint16"),false,false)},
            {"YOKE Y POSITION WITH AP",new SimVarDefinition("YOKE Y POSITION WITH AP","Percent control deflection fore/aft (for animation). Also includes AP’s inputs.","position (-16k to 0) -16k = yoke fully pushed in",null,true,false)},
            {"AIRCRAFT WIND X",new SimVarDefinition("AIRCRAFT WIND X","Wind component in aircraft lateral axis","knots",null,true,false)},
            {"AIRCRAFT WIND Y",new SimVarDefinition("AIRCRAFT WIND Y","Wind component in aircraft vertical axis","knots",null,true,false)},
            {"AIRCRAFT WIND Z",new SimVarDefinition("AIRCRAFT WIND Z","Wind component in aircraft longitudinal axis","knots",null,true,false)},
            {"AMBIENT DENSITY",new SimVarDefinition("AMBIENT DENSITY","Ambient density","slugs per cubic feet",null,true,false)},
            {"AMBIENT IN CLOUD",new SimVarDefinition("AMBIENT IN CLOUD","True if the aircraft is in a cloud.","bool",null,true,false)},
            {"AMBIENT PRECIP STATE",new SimVarDefinition("AMBIENT PRECIP STATE","Precip state (bit field)","mask",null,true,false)},
            {"AMBIENT PRESSURE",new SimVarDefinition("AMBIENT PRESSURE","Ambient pressure","inches of mercury, inhg",ConvertType("float64"),true,false)},
            {"AMBIENT TEMPERATURE",new SimVarDefinition("AMBIENT TEMPERATURE","Ambient temperature","celsius",ConvertType("float64"),true,false)},
            {"AMBIENT VISIBILITY",new SimVarDefinition("AMBIENT VISIBILITY","Ambient visibility","meters",null,true,false)},
            {"AMBIENT WIND DIRECTION",new SimVarDefinition("AMBIENT WIND DIRECTION","Wind direction","degrees",ConvertType("float64"),true,false)},
            {"AMBIENT WIND VELOCITY",new SimVarDefinition("AMBIENT WIND VELOCITY","Wind velocity","knots",ConvertType("float64"),true,false)},
            {"AMBIENT WIND X",new SimVarDefinition("AMBIENT WIND X","Wind component in East/West direction.","meters per second",ConvertType("float64"),true,false)},
            {"AMBIENT WIND Y",new SimVarDefinition("AMBIENT WIND Y","Wind component in vertical direction.","meters per second",ConvertType("float64"),true,false)},
            {"AMBIENT WIND Z",new SimVarDefinition("AMBIENT WIND Z","Wind component in North/South direction.","meters per second",ConvertType("float64"),true,false)},
            {"BAROMETER PRESSURE",new SimVarDefinition("BAROMETER PRESSURE","Barometric pressure","millibars",ConvertType("float64"),true,false)},
            {"SEA LEVEL PRESSURE",new SimVarDefinition("SEA LEVEL PRESSURE","Barometric pressure at sea level","millibars",null,true,false)},
            {"STANDARD ATM TEMPERATURE",new SimVarDefinition("STANDARD ATM TEMPERATURE","Outside temperature on the standard ATM scale","rankine",ConvertType("float64"),true,false)},
            {"STRUCT AMBIENT WIND",new SimVarDefinition("STRUCT AMBIENT WIND","X (latitude), Y (vertical) and Z (longitude) components of the wind.","feet_per_second",null,true,false)},
            {"TOTAL AIR TEMPERATURE",new SimVarDefinition("TOTAL AIR TEMPERATURE","Total air temperature is the air temperature at the front of the aircraft where the ram pressure from the speed of the aircraft is taken into account.","celsius",ConvertType("float64"),true,false)},
            {"WINDSHIELD RAIN EFFECT AVAILABLE",new SimVarDefinition("WINDSHIELD RAIN EFFECT AVAILABLE","Is visual effect available on this aircraft","bool",null,true,false)},
            {"AIRSPEED BARBER POLE",new SimVarDefinition("AIRSPEED BARBER POLE","Redline airspeed (dynamic on some aircraft)","knots",ConvertType("var32"),true,false)},
            {"AIRSPEED INDICATED",new SimVarDefinition("AIRSPEED INDICATED","Indicated airspeed","knots",ConvertType("float64"),false,false)},
            {"AIRSPEED MACH",new SimVarDefinition("AIRSPEED MACH","Current mach","mach",ConvertType("uint16"),true,false)},
            {"AIRSPEED TRUE",new SimVarDefinition("AIRSPEED TRUE","True airspeed","knots",null,false,false)},
            {"AIRSPEED TRUE CALIBRATE",new SimVarDefinition("AIRSPEED TRUE CALIBRATE","Angle of True calibration scale on airspeed indicator","degrees",ConvertType("float64"),false,true)},
            {"ANGLE OF ATTACK INDICATOR",new SimVarDefinition("ANGLE OF ATTACK INDICATOR","AoA indication","radians",ConvertType("sint16"),true,false)},
            {"ATTITUDE BARS POSITION",new SimVarDefinition("ATTITUDE BARS POSITION","AI reference pitch reference bars","percent over 100",ConvertType("float64"),true,false)},
            {"ATTITUDE CAGE",new SimVarDefinition("ATTITUDE CAGE","AI caged state","bool",ConvertType("bool"),true,false)},
            {"ATTITUDE INDICATOR BANK DEGREES",new SimVarDefinition("ATTITUDE INDICATOR BANK DEGREES","AI bank indication","radians",ConvertType("float64"),true,false)},
            {"ATTITUDE INDICATOR PITCH DEGREES",new SimVarDefinition("ATTITUDE INDICATOR PITCH DEGREES","AI pitch indication","radians",ConvertType("float64"),true,false)},
            {"BARBER POLE MACH",new SimVarDefinition("BARBER POLE MACH","Mach associated with maximum airspeed","mach",ConvertType("float64"),true,false)},
            {"DELTA HEADING RATE",new SimVarDefinition("DELTA HEADING RATE","Rate of turn of heading indicator","radians per second",ConvertType("sint16"),false,false)},
            {"GYRO DRIFT ERROR",new SimVarDefinition("GYRO DRIFT ERROR","Angular error of heading indicator","radians",ConvertType("sint16"),true,false)},
            {"HEADING INDICATOR",new SimVarDefinition("HEADING INDICATOR","Heading indicator (directional gyro) indication","radians",null,true,false)},
            {"INDICATED ALTITUDE",new SimVarDefinition("INDICATED ALTITUDE","Altimeter indication","feet",ConvertType("float64"),false,false)},
            {"INDICATED ALTITUDE EX1",new SimVarDefinition("INDICATED ALTITUDE EX1","Similar to INDICATED_ALTITUDE but doesn’t affect actual plan position when Setting this variable.","feet",null,false,false)},
            {"KOHLSMAN SETTING HG",new SimVarDefinition("KOHLSMAN SETTING HG","Altimeter setting","inches of mercury, inhg",ConvertType("float64"),true,false)},
            {"KOHLSMAN SETTING MB",new SimVarDefinition("KOHLSMAN SETTING MB","Altimeter setting","millibars",ConvertType("float64"),false,false)},
            {"KOHLSMAN SETTING STD",new SimVarDefinition("KOHLSMAN SETTING STD","True if altimeter is in Standard mode","bool",ConvertType("bool"),false,false)},
            {"MACH MAX OPERATE",new SimVarDefinition("MACH MAX OPERATE","Maximum design mach","mach",ConvertType("uint32"),true,false)},
            {"MAX G FORCE",new SimVarDefinition("MAX G FORCE","Maximum G force attained","gforce",ConvertType("float64"),true,false)},
            {"MIN G FORCE",new SimVarDefinition("MIN G FORCE","Minimum G force attained","gforce",ConvertType("float64"),true,false)},
            {"OVERSPEED WARNING",new SimVarDefinition("OVERSPEED WARNING","Overspeed warning state","bool",ConvertType("bool8"),true,false)},
            {"PARTIAL PANEL ADF",new SimVarDefinition("PARTIAL PANEL ADF","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL AIRSPEED",new SimVarDefinition("PARTIAL PANEL AIRSPEED","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL ALTIMETER",new SimVarDefinition("PARTIAL PANEL ALTIMETER","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL ATTITUDE",new SimVarDefinition("PARTIAL PANEL ATTITUDE","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL AVIONICS",new SimVarDefinition("PARTIAL PANEL AVIONICS","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",null,true,false)},
            {"PARTIAL PANEL COMM",new SimVarDefinition("PARTIAL PANEL COMM","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL COMPASS",new SimVarDefinition("PARTIAL PANEL COMPASS","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL ELECTRICAL",new SimVarDefinition("PARTIAL PANEL ELECTRICAL","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL ENGINE",new SimVarDefinition("PARTIAL PANEL ENGINE","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL FUEL INDICATOR",new SimVarDefinition("PARTIAL PANEL FUEL INDICATOR","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),true,false)},
            {"PARTIAL PANEL HEADING",new SimVarDefinition("PARTIAL PANEL HEADING","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL NAV",new SimVarDefinition("PARTIAL PANEL NAV","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL PITOT",new SimVarDefinition("PARTIAL PANEL PITOT","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL TRANSPONDER",new SimVarDefinition("PARTIAL PANEL TRANSPONDER","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL TURN COORDINATOR",new SimVarDefinition("PARTIAL PANEL TURN COORDINATOR","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),true,false)},
            {"PARTIAL PANEL VACUUM",new SimVarDefinition("PARTIAL PANEL VACUUM","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PARTIAL PANEL VERTICAL VELOCITY",new SimVarDefinition("PARTIAL PANEL VERTICAL VELOCITY","Gauge fail flag (0 = ok, 1 = fail, 2 = blank)","enum",ConvertType("enum8"),false,false)},
            {"PLANE HEADING DEGREES GYRO",new SimVarDefinition("PLANE HEADING DEGREES GYRO","Heading indicator (directional gyro) indication","radians",ConvertType("float64"),false,false)},
            {"RADIO HEIGHT",new SimVarDefinition("RADIO HEIGHT","Radar altitude","feet",ConvertType("float64"),true,false)},
            {"STALL WARNING",new SimVarDefinition("STALL WARNING","Stall warning state","bool",ConvertType("bool8"),true,false)},
            {"SUCTION PRESSURE",new SimVarDefinition("SUCTION PRESSURE","Vacuum system suction pressure","inches of mercury, inhg",ConvertType("float64"),false,false)},
            {"TURN COORDINATOR BALL",new SimVarDefinition("TURN COORDINATOR BALL","Turn coordinator ball position","position 128 (-127 to 127)",ConvertType("sint8"),true,false)},
            {"TURN COORDINATOR BALL INV",new SimVarDefinition("TURN COORDINATOR BALL INV","Turn coordinator ball position inverted (upside down)","position 128 (-127 to 127)",ConvertType("sint8"),true,false)},
            {"VERTICAL SPEED",new SimVarDefinition("VERTICAL SPEED","Vertical speed indication","feet per second",ConvertType("sint32"),false,false)},
            {"WISKEY COMPASS INDICATION DEGREES",new SimVarDefinition("WISKEY COMPASS INDICATION DEGREES","Magnetic compass indication","degrees",ConvertType("float64"),false,false)},
            {"ESTIMATED FUEL FLOW",new SimVarDefinition("ESTIMATED FUEL FLOW","Estimated fuel flow at cruise","pounds per hour",null,true,false)},
            {"FUEL CROSS FEED",new SimVarDefinition("FUEL CROSS FEED","Cross feed valve:[index]","enum",ConvertType("enum"),true,false)},
            {"FUEL LEFT CAPACITY",new SimVarDefinition("FUEL LEFT CAPACITY","Maximum capacity in volume","gallons",null,true,false)},
            {"FUEL LEFT QUANTITY",new SimVarDefinition("FUEL LEFT QUANTITY","Current quantity in volume","gallons",ConvertType("float64"),true,false)},
            {"FUEL RIGHT CAPACITY",new SimVarDefinition("FUEL RIGHT CAPACITY","Maximum capacity in volume","gallons",null,true,false)},
            {"FUEL RIGHT QUANTITY",new SimVarDefinition("FUEL RIGHT QUANTITY","Current quantity in volume","gallons",ConvertType("float64"),true,false)},
            {"FUEL SELECTED QUANTITY",new SimVarDefinition("FUEL SELECTED QUANTITY","Quantity of selected tank","gallons",ConvertType("float64"),true,false)},
            {"FUEL SELECTED QUANTITY PERCENT",new SimVarDefinition("FUEL SELECTED QUANTITY PERCENT","Percent or capacity for selected tank","percent over 100",ConvertType("float64"),true,false)},
            {"FUEL TANK CENTER2 CAPACITY",new SimVarDefinition("FUEL TANK CENTER2 CAPACITY","Maximum capacity in volume","gallons",ConvertType("uint32"),true,false)},
            {"FUEL TANK CENTER2 LEVEL",new SimVarDefinition("FUEL TANK CENTER2 LEVEL","Percent of maximum capacity","percent over 100",ConvertType("uint32"),false,false)},
            {"FUEL TANK CENTER2 QUANTITY",new SimVarDefinition("FUEL TANK CENTER2 QUANTITY","Current quantity in volume","gallons",ConvertType("float64"),false,false)},
            {"FUEL TANK CENTER3 CAPACITY",new SimVarDefinition("FUEL TANK CENTER3 CAPACITY","Maximum capacity in volume","gallons",null,true,false)},
            {"FUEL TANK CENTER3 LEVEL",new SimVarDefinition("FUEL TANK CENTER3 LEVEL","Percent of maximum capacity","percent over 100",null,false,false)},
            {"FUEL TANK CENTER3 QUANTITY",new SimVarDefinition("FUEL TANK CENTER3 QUANTITY","Current quantity in volume","gallons",ConvertType("float64"),false,false)},
            {"FUEL TANK CENTER CAPACITY",new SimVarDefinition("FUEL TANK CENTER CAPACITY","Maximum capacity in volume","gallons",ConvertType("uint32"),true,false)},
            {"FUEL TANK CENTER LEVEL",new SimVarDefinition("FUEL TANK CENTER LEVEL","Percent of maximum capacity","percent over 100",ConvertType("uint32"),false,false)},
            {"FUEL TANK CENTER QUANTITY",new SimVarDefinition("FUEL TANK CENTER QUANTITY","Current quantity in volume","gallons",ConvertType("float64"),false,false)},
            {"FUEL TANK EXTERNAL1 CAPACITY",new SimVarDefinition("FUEL TANK EXTERNAL1 CAPACITY","Maximum capacity in volume","gallons",null,true,false)},
            {"FUEL TANK EXTERNAL1 LEVEL",new SimVarDefinition("FUEL TANK EXTERNAL1 LEVEL","Percent of maximum capacity","percent over 100",null,false,false)},
            {"FUEL TANK EXTERNAL1 QUANTITY",new SimVarDefinition("FUEL TANK EXTERNAL1 QUANTITY","Current quantity in volume","gallons",null,false,false)},
            {"FUEL TANK EXTERNAL2 CAPACITY",new SimVarDefinition("FUEL TANK EXTERNAL2 CAPACITY","Maximum capacity in volume","gallons",null,true,false)},
            {"FUEL TANK EXTERNAL2 LEVEL",new SimVarDefinition("FUEL TANK EXTERNAL2 LEVEL","Percent of maximum capacity","percent over 100",null,false,false)},
            {"FUEL TANK EXTERNAL2 QUANTITY",new SimVarDefinition("FUEL TANK EXTERNAL2 QUANTITY","Current quantity in volume","gallons",null,false,false)},
            {"FUEL TANK LEFT AUX CAPACITY",new SimVarDefinition("FUEL TANK LEFT AUX CAPACITY","Maximum capacity in volume","gallons",ConvertType("uint32"),true,false)},
            {"FUEL TANK LEFT AUX LEVEL",new SimVarDefinition("FUEL TANK LEFT AUX LEVEL","Percent of maximum capacity","percent over 100",ConvertType("uint32"),false,false)},
            {"FUEL TANK LEFT AUX QUANTITY",new SimVarDefinition("FUEL TANK LEFT AUX QUANTITY","Current quantity in volume","gallons",null,false,false)},
            {"FUEL TANK LEFT MAIN CAPACITY",new SimVarDefinition("FUEL TANK LEFT MAIN CAPACITY","Maximum capacity in volume","gallons",ConvertType("uint32"),true,false)},
            {"FUEL TANK LEFT MAIN LEVEL",new SimVarDefinition("FUEL TANK LEFT MAIN LEVEL","Percent of maximum capacity","percent over 100",ConvertType("uint32"),false,false)},
            {"FUEL TANK LEFT MAIN QUANTITY",new SimVarDefinition("FUEL TANK LEFT MAIN QUANTITY","Current quantity in volume","gallons",null,false,false)},
            {"FUEL TANK LEFT TIP CAPACITY",new SimVarDefinition("FUEL TANK LEFT TIP CAPACITY","Maximum capacity in volume","gallons",ConvertType("uint32"),true,false)},
            {"FUEL TANK LEFT TIP LEVEL",new SimVarDefinition("FUEL TANK LEFT TIP LEVEL","Percent of maximum capacity","percent over 100",ConvertType("uint32"),false,false)},
            {"FUEL TANK LEFT TIP QUANTITY",new SimVarDefinition("FUEL TANK LEFT TIP QUANTITY","Current quantity in volume","gallons",null,false,false)},
            {"FUEL TANK RIGHT AUX CAPACITY",new SimVarDefinition("FUEL TANK RIGHT AUX CAPACITY","Maximum capacity in volume","gallons",ConvertType("uint32"),true,false)},
            {"FUEL TANK RIGHT AUX LEVEL",new SimVarDefinition("FUEL TANK RIGHT AUX LEVEL","Percent of maximum capacity","percent over 100",ConvertType("uint32"),false,false)},
            {"FUEL TANK RIGHT AUX QUANTITY",new SimVarDefinition("FUEL TANK RIGHT AUX QUANTITY","Current quantity in volume","gallons",null,false,false)},
            {"FUEL TANK RIGHT MAIN CAPACITY",new SimVarDefinition("FUEL TANK RIGHT MAIN CAPACITY","Maximum capacity in volume","gallons",ConvertType("uint32"),true,false)},
            {"FUEL TANK RIGHT MAIN LEVEL",new SimVarDefinition("FUEL TANK RIGHT MAIN LEVEL","Percent of maximum capacity","percent over 100",ConvertType("uint32"),false,false)},
            {"FUEL TANK RIGHT MAIN QUANTITY",new SimVarDefinition("FUEL TANK RIGHT MAIN QUANTITY","Current quantity in volume","gallons",null,false,false)},
            {"FUEL TANK RIGHT TIP CAPACITY",new SimVarDefinition("FUEL TANK RIGHT TIP CAPACITY","Maximum capacity in volume","gallons",ConvertType("uint32"),true,false)},
            {"FUEL TANK RIGHT TIP LEVEL",new SimVarDefinition("FUEL TANK RIGHT TIP LEVEL","Percent of maximum capacity","percent over 100",ConvertType("uint32"),false,false)},
            {"FUEL TANK RIGHT TIP QUANTITY",new SimVarDefinition("FUEL TANK RIGHT TIP QUANTITY","Current quantity in volume","gallons",null,false,false)},
            {"FUEL TANK SELECTOR",new SimVarDefinition("FUEL TANK SELECTOR","Which tank is selected. See fuel tank list.","enum",ConvertType("enum"),true,false)},
            {"FUEL TOTAL CAPACITY",new SimVarDefinition("FUEL TOTAL CAPACITY","Total capacity of the aircraft","gallons",null,true,false)},
            {"FUEL TOTAL QUANTITY",new SimVarDefinition("FUEL TOTAL QUANTITY","Current quantity in volume","gallons",ConvertType("float64"),true,false)},
            {"FUEL TOTAL QUANTITY WEIGHT",new SimVarDefinition("FUEL TOTAL QUANTITY WEIGHT","Current total fuel weight of the aircraft","pounds",ConvertType("float64"),true,false)},
            {"FUEL WEIGHT PER GALLON",new SimVarDefinition("FUEL WEIGHT PER GALLON","Fuel weight per gallon","pounds",ConvertType("float64"),true,false)},
            {"NUM FUEL SELECTORS",new SimVarDefinition("NUM FUEL SELECTORS","Number of selectors on the aircraft","number",null,true,false)},
            {"UNLIMITED FUEL",new SimVarDefinition("UNLIMITED FUEL","Unlimited fuel flag","bool",null,true,false)},
            {"EXIT OPEN",new SimVarDefinition("EXIT OPEN","DEPRECATED. Percent door/exit open","percent over 100",null,false,false)},
            {"EXIT POSX",new SimVarDefinition("EXIT POSX","DEPRECATED. Position of exit relative to datum reference point","feet",null,true,false)},
            {"EXIT POSY",new SimVarDefinition("EXIT POSY","DEPRECATED. Position of exit relative to datum reference point","feet",null,true,false)},
            {"EXIT POSZ",new SimVarDefinition("EXIT POSZ","DEPRECATED. Position of exit relative to datum reference point","feet",null,true,false)},
            {"EXIT TYPE",new SimVarDefinition("EXIT TYPE","DEPRECATED. One of:[index]","enum",null,true,false)},
            {"INTERACTIVE POINT BANK",new SimVarDefinition("INTERACTIVE POINT BANK","Interactive Point orientation: Bank","degrees",ConvertType("float64"),true,false)},
            {"INTERACTIVE POINT HEADING",new SimVarDefinition("INTERACTIVE POINT HEADING","Interactive Point orientation: Heading","degrees",ConvertType("float64"),true,false)},
            {"INTERACTIVE POINT JETWAY LEFT BEND",new SimVarDefinition("INTERACTIVE POINT JETWAY LEFT BEND","Interactive Point Jetway constant, determining the desired left bend ratio of jetway hood","percent",ConvertType("float64"),true,false)},
            {"INTERACTIVE POINT JETWAY LEFT DEPLOYMENT",new SimVarDefinition("INTERACTIVE POINT JETWAY LEFT DEPLOYMENT","Interactive Point Jetway constant, determining the desired left deployment angle of jetway hood","degrees",ConvertType("float64"),true,false)},
            {"INTERACTIVE POINT JETWAY RIGHT BEND",new SimVarDefinition("INTERACTIVE POINT JETWAY RIGHT BEND","Interactive Point Jetway constant, determining the desired right bend ratio of jetway hood","percent",ConvertType("float64"),true,false)},
            {"INTERACTIVE POINT JETWAY RIGHT DEPLOYMENT",new SimVarDefinition("INTERACTIVE POINT JETWAY RIGHT DEPLOYMENT","Interactive Point Jetway constant, determining the desired right deployment angle of jetway hood","degrees",ConvertType("float64"),true,false)},
            {"INTERACTIVE POINT JETWAY TOP HORIZONTAL",new SimVarDefinition("INTERACTIVE POINT JETWAY TOP HORIZONTAL","Interactive Point Jetway constant, determining the desired top horizontal ratio of displacement of jetway hood","percent",ConvertType("float64"),true,false)},
            {"INTERACTIVE POINT JETWAY TOP VERTICAL",new SimVarDefinition("INTERACTIVE POINT JETWAY TOP VERTICAL","Interactive Point Jetway constant, determining the desired top vertical ratio of displacement of jetway hood","percent",ConvertType("float64"),true,false)},
            {"INTERACTIVE POINT OPEN",new SimVarDefinition("INTERACTIVE POINT OPEN","Interactive Point current percentage of opening (if door) or deployment (if hose/cable)","percent over 100",ConvertType("float64"),false,false)},
            {"INTERACTIVE POINT PITCH",new SimVarDefinition("INTERACTIVE POINT PITCH","Interactive Point orientation: Pitch","degrees",ConvertType("float64"),true,false)},
            {"INTERACTIVE POINT POSX",new SimVarDefinition("INTERACTIVE POINT POSX","Interactive Point Position relative to datum reference point","feet",ConvertType("float64"),true,false)},
            {"INTERACTIVE POINT POSY",new SimVarDefinition("INTERACTIVE POINT POSY","Interactive Point Position relative to datum reference point","feet",ConvertType("float64"),true,false)},
            {"INTERACTIVE POINT POSZ",new SimVarDefinition("INTERACTIVE POINT POSZ","Interactive Point Position relative to datum reference point","feet",ConvertType("float64"),true,false)},
            {"INTERACTIVE POINT TYPE",new SimVarDefinition("INTERACTIVE POINT TYPE","One of the following:","enum",ConvertType("enum"),true,false)},
            {"ANTISKID BRAKES ACTIVE",new SimVarDefinition("ANTISKID BRAKES ACTIVE","True if antiskid brakes active","bool",ConvertType("bool"),true,false)},
            {"AUTOBRAKES ACTIVE",new SimVarDefinition("AUTOBRAKES ACTIVE","Whether or not the AutoBrakes are currently active.","bool",ConvertType("bool"),true,false)},
            {"AUTO BRAKE SWITCH CB",new SimVarDefinition("AUTO BRAKE SWITCH CB","Auto brake switch position","number",ConvertType("enum"),true,false)},
            {"AUX WHEEL ROTATION ANGLE",new SimVarDefinition("AUX WHEEL ROTATION ANGLE","Aux wheel rotation angle","radians",null,true,false)},
            {"AUX WHEEL RPM",new SimVarDefinition("AUX WHEEL RPM","Rpm of fourth set of gear wheels.","rpm",null,true,false)},
            {"CENTER WHEEL ROTATION ANGLE",new SimVarDefinition("CENTER WHEEL ROTATION ANGLE","Center wheel rotation angle","radians",null,true,false)},
            {"CENTER WHEEL RPM",new SimVarDefinition("CENTER WHEEL RPM","Center landing gear rpm","rpm",null,true,false)},
            {"GEAR ANIMATION POSITION",new SimVarDefinition("GEAR ANIMATION POSITION","Percent gear animation extended","number",null,true,false)},
            {"GEAR AUX POSITION",new SimVarDefinition("GEAR AUX POSITION","Percent auxiliary gear extended","percent over 100",ConvertType("float64"),true,false)},
            {"GEAR AUX STEER ANGLE",new SimVarDefinition("GEAR AUX STEER ANGLE","Aux wheel angle, negative to the left, positive to the right. The aux wheel is the fourth set of gear, sometimes used on helicopters.","percent over 100",null,true,false)},
            {"GEAR AUX STEER ANGLE PCT",new SimVarDefinition("GEAR AUX STEER ANGLE PCT","Aux steer angle as a percentage","percent over 100",null,true,false)},
            {"GEAR CENTER POSITION",new SimVarDefinition("GEAR CENTER POSITION","Percent center gear extended","percent over 100",ConvertType("float64"),false,false)},
            {"GEAR CENTER STEER ANGLE",new SimVarDefinition("GEAR CENTER STEER ANGLE","Center wheel angle, negative to the left, positive to the right.","percent over 100",null,true,false)},
            {"GEAR CENTER STEER ANGLE PCT",new SimVarDefinition("GEAR CENTER STEER ANGLE PCT","Center steer angle as a percentage","percent over 100",null,true,false)},
            {"GEAR DAMAGE BY SPEED",new SimVarDefinition("GEAR DAMAGE BY SPEED","True if gear has been damaged by excessive speed","bool",null,true,false)},
            {"GEAR EMERGENCY HANDLE POSITION",new SimVarDefinition("GEAR EMERGENCY HANDLE POSITION","True if gear emergency handle applied","bool",ConvertType("bool"),true,false)},
            {"GEAR HANDLE POSITION",new SimVarDefinition("GEAR HANDLE POSITION","True if gear handle is applied","bool",ConvertType("uint32"),false,true)},
            {"GEAR HYDRAULIC PRESSURE",new SimVarDefinition("GEAR HYDRAULIC PRESSURE","Gear hydraulic pressure","pound force per square foot (psf)",null,true,false)},
            {"GEAR LEFT POSITION",new SimVarDefinition("GEAR LEFT POSITION","Percent left gear extended","percent over 100",ConvertType("float64"),false,false)},
            {"GEAR LEFT STEER ANGLE",new SimVarDefinition("GEAR LEFT STEER ANGLE","Left wheel angle, negative to the left, positive to the right.","percent over 100",null,true,false)},
            {"GEAR LEFT STEER ANGLE PCT",new SimVarDefinition("GEAR LEFT STEER ANGLE PCT","Left steer angle as a percentage","percent over 100",null,true,false)},
            {"GEAR POSITION",new SimVarDefinition("GEAR POSITION","Position of landing gear:[index]","enum",null,false,false)},
            {"GEAR RIGHT POSITION",new SimVarDefinition("GEAR RIGHT POSITION","Percent right gear extended","percent over 100",ConvertType("float64"),false,false)},
            {"GEAR RIGHT STEER ANGLE",new SimVarDefinition("GEAR RIGHT STEER ANGLE","Right wheel angle, negative to the left, positive to the right.","percent over 100",null,true,false)},
            {"GEAR RIGHT STEER ANGLE PCT",new SimVarDefinition("GEAR RIGHT STEER ANGLE PCT","Right steer angle as a percentage","percent over 100",null,true,false)},
            {"GEAR SPEED EXCEEDED",new SimVarDefinition("GEAR SPEED EXCEEDED","True if safe speed limit for gear exceeded","bool",null,true,false)},
            {"GEAR STEER ANGLE",new SimVarDefinition("GEAR STEER ANGLE","Alternative method of getting the steer angle. Index is","percent over 100",null,true,false)},
            {"GEAR STEER ANGLE PCT",new SimVarDefinition("GEAR STEER ANGLE PCT","Alternative method of getting steer angle as a percentage. Index is","percent over 100",null,true,false)},
            {"GEAR TAIL POSITION",new SimVarDefinition("GEAR TAIL POSITION","Percent tail gear extended","percent over 100",ConvertType("float64"),true,false)},
            {"GEAR TOTAL PCT EXTENDED",new SimVarDefinition("GEAR TOTAL PCT EXTENDED","Percent total gear extended","percentage",null,true,false)},
            {"GEAR WARNING",new SimVarDefinition("GEAR WARNING","One of:[index]","enum",ConvertType("bool"),true,false)},
            {"IS GEAR FLOATS",new SimVarDefinition("IS GEAR FLOATS","True if landing gear is floats","bool",null,true,false)},
            {"IS GEAR RETRACTABLE",new SimVarDefinition("IS GEAR RETRACTABLE","True if gear can be retracted","bool",null,true,false)},
            {"IS GEAR SKIDS",new SimVarDefinition("IS GEAR SKIDS","True if landing gear is skids","bool",null,true,false)},
            {"IS GEAR SKIS",new SimVarDefinition("IS GEAR SKIS","True if landing gear is skis","bool",null,true,false)},
            {"IS GEAR WHEELS",new SimVarDefinition("IS GEAR WHEELS","True if landing gear is wheels","bool",null,true,false)},
            {"LEFT WHEEL ROTATION ANGLE",new SimVarDefinition("LEFT WHEEL ROTATION ANGLE","Left wheel rotation angle","radians",null,true,false)},
            {"LEFT WHEEL RPM",new SimVarDefinition("LEFT WHEEL RPM","Left landing gear rpm","rpm",null,true,false)},
            {"NOSEWHEEL LOCK ON",new SimVarDefinition("NOSEWHEEL LOCK ON","True if the nosewheel lock is engaged.","bool",ConvertType("bool"),true,false)},
            {"REJECTED TAKEOFF BRAKES ACTIVE",new SimVarDefinition("REJECTED TAKEOFF BRAKES ACTIVE","Whether or not the rejected takeoff brakes are currently active.","bool",ConvertType("bool"),true,false)},
            {"RETRACT FLOAT SWITCH",new SimVarDefinition("RETRACT FLOAT SWITCH","True if retract float switch on","bool",ConvertType("bool"),true,false)},
            {"RETRACT LEFT FLOAT EXTENDED",new SimVarDefinition("RETRACT LEFT FLOAT EXTENDED","If aircraft has retractable floats.","percent (0 is fully retracted, 100 is fully extended)",null,true,false)},
            {"RETRACT RIGHT FLOAT EXTENDED",new SimVarDefinition("RETRACT RIGHT FLOAT EXTENDED","If aircraft has retractable floats.","percent (0 is fully retracted, 100 is fully extended)",null,true,false)},
            {"RIGHT WHEEL ROTATION ANGLE",new SimVarDefinition("RIGHT WHEEL ROTATION ANGLE","Right wheel rotation angle","radians",null,true,false)},
            {"RIGHT WHEEL RPM",new SimVarDefinition("RIGHT WHEEL RPM","Right landing gear rpm","rpm",null,true,false)},
            {"STEER INPUT CONTROL",new SimVarDefinition("STEER INPUT CONTROL","Position of steering tiller","percent over 100",ConvertType("float64"),true,false)},
            {"TAILWHEEL LOCK ON",new SimVarDefinition("TAILWHEEL LOCK ON","True if tailwheel lock applied","bool",ConvertType("bool"),true,false)},
            {"WATER LEFT RUDDER EXTENDED",new SimVarDefinition("WATER LEFT RUDDER EXTENDED","Percent extended","percentage",null,true,false)},
            {"WATER LEFT RUDDER STEER ANGLE",new SimVarDefinition("WATER LEFT RUDDER STEER ANGLE","Water left rudder angle, negative to the left, positive to the right.","percent over 100",null,true,false)},
            {"WATER LEFT RUDDER STEER ANGLE PCT",new SimVarDefinition("WATER LEFT RUDDER STEER ANGLE PCT","Water left rudder angle as a percentage","percent over 100",null,true,false)},
            {"WATER RIGHT RUDDER EXTENDED",new SimVarDefinition("WATER RIGHT RUDDER EXTENDED","Percent extended","percentage",null,true,false)},
            {"WATER RIGHT RUDDER STEER ANGLE",new SimVarDefinition("WATER RIGHT RUDDER STEER ANGLE","Water right rudder angle, negative to the left, positive to the right.","percent over 100",null,true,false)},
            {"WATER RIGHT RUDDER STEER ANGLE PCT",new SimVarDefinition("WATER RIGHT RUDDER STEER ANGLE PCT","Water right rudder as a percentage","percent over 100",null,true,false)},
            {"WATER RUDDER HANDLE POSITION",new SimVarDefinition("WATER RUDDER HANDLE POSITION","Position of the water rudder handle (0 handle retracted, 100 rudder handle applied)","percent over 100",ConvertType("float64"),false,true)},
            {"WHEEL ROTATION ANGLE",new SimVarDefinition("WHEEL ROTATION ANGLE","Wheel rotation angle. Index is","radians",null,true,false)},
            {"WHEEL RPM",new SimVarDefinition("WHEEL RPM","Wheel rpm. Index is","rpm",null,true,false)},
            {"LANDING LIGHT PBH",new SimVarDefinition("LANDING LIGHT PBH","Landing light pitch bank and heading","simconnect_data_xyz structure",null,true,false)},
            {"LIGHT BACKLIGHT INTENSITY",new SimVarDefinition("LIGHT BACKLIGHT INTENSITY","","",null,true,false)},
            {"LIGHT BEACON",new SimVarDefinition("LIGHT BEACON","Light switch state","bool",ConvertType("float64"),true,true)},
            {"LIGHT BEACON ON",new SimVarDefinition("LIGHT BEACON ON","Return true if the light is on.","bool",ConvertType("bool"),true,false)},
            {"LIGHT BRAKE ON",new SimVarDefinition("LIGHT BRAKE ON","Return true if the light is on.","bool",null,true,false)},
            {"LIGHT CABIN",new SimVarDefinition("LIGHT CABIN","Light switch state","bool",null,true,true)},
            {"LIGHT CABIN ON",new SimVarDefinition("LIGHT CABIN ON","Return true if the light is on.","bool",ConvertType("bool"),true,false)},
            {"LIGHT GYROLIGHT INTENSITY",new SimVarDefinition("LIGHT GYROLIGHT INTENSITY","","",null,true,false)},
            {"LIGHT HEADLIGHT INTENSITY",new SimVarDefinition("LIGHT HEADLIGHT INTENSITY","","",null,true,false)},
            {"LIGHT HEAD ON",new SimVarDefinition("LIGHT HEAD ON","Return true if the light is on.","bool",null,true,false)},
            {"LIGHT LANDING",new SimVarDefinition("LIGHT LANDING","Light switch state","bool",ConvertType("float64"),true,true)},
            {"LIGHT LANDING ON",new SimVarDefinition("LIGHT LANDING ON","Return true if the light is on.","bool",ConvertType("bool"),true,false)},
            {"LIGHT LOGO",new SimVarDefinition("LIGHT LOGO","Light switch state","bool",ConvertType("float64"),true,true)},
            {"LIGHT LOGO ON",new SimVarDefinition("LIGHT LOGO ON","Return true if the light is on.","bool",ConvertType("bool"),true,false)},
            {"LIGHT NAV",new SimVarDefinition("LIGHT NAV","Light switch state","bool",ConvertType("float64"),true,true)},
            {"LIGHT NAV ON",new SimVarDefinition("LIGHT NAV ON","Return true if the light is on.","bool",ConvertType("bool"),true,false)},
            {"LIGHT ON STATES",new SimVarDefinition("LIGHT ON STATES","Bit mask:[index]","mask",null,true,false)},
            {"LIGHT PANEL",new SimVarDefinition("LIGHT PANEL","Light switch state","bool",ConvertType("float64"),true,true)},
            {"LIGHT PANEL ON",new SimVarDefinition("LIGHT PANEL ON","Return true if the light is on.","bool",ConvertType("bool"),true,false)},
            {"LIGHT RECOGNITION",new SimVarDefinition("LIGHT RECOGNITION","Light switch state","bool",ConvertType("float64"),true,true)},
            {"LIGHT RECOGNITION ON",new SimVarDefinition("LIGHT RECOGNITION ON","Return true if the light is on.","bool",ConvertType("bool"),true,false)},
            {"LIGHT STATES",new SimVarDefinition("LIGHT STATES","Same as LIGHT ON STATES","mask",null,true,true)},
            {"LIGHT STROBE",new SimVarDefinition("LIGHT STROBE","Light switch state","bool",ConvertType("float64"),true,true)},
            {"LIGHT STROBE ON",new SimVarDefinition("LIGHT STROBE ON","Return true if the light is on.","bool",ConvertType("bool"),true,false)},
            {"LIGHT TAXI",new SimVarDefinition("LIGHT TAXI","Light switch state","bool",ConvertType("float64"),true,true)},
            {"LIGHT TAXI ON",new SimVarDefinition("LIGHT TAXI ON","Return true if the light is on.","bool",ConvertType("bool"),true,false)},
            {"LIGHT WING",new SimVarDefinition("LIGHT WING","Light switch state","bool",ConvertType("float64"),true,true)},
            {"LIGHT WING ON",new SimVarDefinition("LIGHT WING ON","Return true if the light is on.","bool",ConvertType("bool"),true,false)},
            {"AIRSPEED SELECT INDICATED OR TRUE",new SimVarDefinition("AIRSPEED SELECT INDICATED OR TRUE","The airspeed, whether true or indicated airspeed has been selected.","knots",ConvertType("float64"),true,false)},
            {"ANEMOMETER PCT RPM",new SimVarDefinition("ANEMOMETER PCT RPM","Anemometer rpm as a percentage","percent over 100",null,true,false)},
            {"ANIMATION DELTA TIME",new SimVarDefinition("ANIMATION DELTA TIME","Difference of time between the current frame and the last frame where this SimObject has been animated","seconds",ConvertType("float64"),true,false)},
            {"ANNUNCIATOR SWITCH",new SimVarDefinition("ANNUNCIATOR SWITCH","TODO","bool",ConvertType("bool"),true,false)},
            {"APU GENERATOR ACTIVE",new SimVarDefinition("APU GENERATOR ACTIVE","Existed in FSX - Now also takes an index to be able to have multiple generators on a single APU","bool",ConvertType("bool"),true,false)},
            {"APU GENERATOR SWITCH",new SimVarDefinition("APU GENERATOR SWITCH","Existed in FSX - Now also takes an index to be able to have multiple generators on a single APU","bool",ConvertType("bool"),true,false)},
            {"APU ON FIRE DETECTED",new SimVarDefinition("APU ON FIRE DETECTED","True if APU on fire","bool",ConvertType("bool"),true,false)},
            {"APU PCT RPM",new SimVarDefinition("APU PCT RPM","Auxiliary power unit rpm, as a percentage","percent over 100",ConvertType("bool"),true,false)},
            {"APU PCT STARTER",new SimVarDefinition("APU PCT STARTER","Auxiliary power unit starter, as a percentage","percent over 100",ConvertType("float64"),true,false)},
            {"APU VOLTS",new SimVarDefinition("APU VOLTS","Existed in FSX - Now also takes an index to be able to have multiple generators on a single APU","volts",ConvertType("float64"),true,false)},
            {"ARTIFICIAL GROUND ELEVATION",new SimVarDefinition("ARTIFICIAL GROUND ELEVATION","In case scenery is not loaded for AI planes, this variable can be used to set adefault surface elevation.","feet",null,true,false)},
            {"ATC HEAVY",new SimVarDefinition("ATC HEAVY","Is this aircraft recognized by ATC as heavy","bool",null,false,false)},
            {"ATC SUGGESTED MIN RWY LANDING",new SimVarDefinition("ATC SUGGESTED MIN RWY LANDING","Suggested minimum runway length for landing. Used by ATC ","feet",null,true,false)},
            {"ATC SUGGESTED MIN RWY TAKEOFF",new SimVarDefinition("ATC SUGGESTED MIN RWY TAKEOFF","Suggested minimum runway length for takeoff. Used by ATC ","feet",null,true,false)},
            {"AUTO COORDINATION",new SimVarDefinition("AUTO COORDINATION","Is auto-coordination active","bool",null,false,false)},
            {"BETA DOT",new SimVarDefinition("BETA DOT","Beta dot","radians per second",null,true,false)},
            {"BLEED AIR SOURCE CONTROL",new SimVarDefinition("BLEED AIR SOURCE CONTROL","One of:[index]","enum",ConvertType("enum"),true,false)},
            {"BRAKE DEPENDENT HYDRAULIC PRESSURE",new SimVarDefinition("BRAKE DEPENDENT HYDRAULIC PRESSURE","Brake dependent hydraulic pressure reading","pounds per square foot",ConvertType("float64"),true,false)},
            {"CABIN NO SMOKING ALERT SWITCH",new SimVarDefinition("CABIN NO SMOKING ALERT SWITCH","True if the No Smoking switch is on.","bool",ConvertType("bool"),false,false)},
            {"CABIN SEATBELTS ALERT SWITCH",new SimVarDefinition("CABIN SEATBELTS ALERT SWITCH","True if the Seatbelts switch is on.","bool",ConvertType("bool"),false,false)},
            {"CATEGORY",new SimVarDefinition("CATEGORY","One of the following:[index]","string",null,true,false)},
            {"CG AFT LIMIT",new SimVarDefinition("CG AFT LIMIT","Aft limit of CG","percent over 100",ConvertType("float64"),true,false)},
            {"CG FWD LIMIT",new SimVarDefinition("CG FWD LIMIT","Forward limit of CG","percent over 100",ConvertType("float64"),true,false)},
            {"CG MAX MACH",new SimVarDefinition("CG MAX MACH","Max mach CG","machs",ConvertType("float64"),true,false)},
            {"CG MIN MACH",new SimVarDefinition("CG MIN MACH","Min mach CG","machs",ConvertType("float64"),true,false)},
            {"CG PERCENT",new SimVarDefinition("CG PERCENT","Longitudinal CG position as a percent of reference chord","percent over 100",ConvertType("float64"),true,false)},
            {"CG PERCENT LATERAL",new SimVarDefinition("CG PERCENT LATERAL","Lateral CG position as a percent of reference chord","percent over 100",null,true,false)},
            {"CONCORDE NOSE ANGLE",new SimVarDefinition("CONCORDE NOSE ANGLE","0 = up","radians",ConvertType("float64"),true,false)},
            {"CONCORDE VISOR NOSE HANDLE",new SimVarDefinition("CONCORDE VISOR NOSE HANDLE","One of:[index]","enum",ConvertType("sint32"),true,true)},
            {"CONCORDE VISOR POSITION PERCENT",new SimVarDefinition("CONCORDE VISOR POSITION PERCENT","0 = up, 1.0 = extended/down","percent over 100",ConvertType("float64"),true,false)},
            {"CRASH FLAG",new SimVarDefinition("CRASH FLAG","One of:[index]","enum",null,true,true)},
            {"CRASH SEQUENCE",new SimVarDefinition("CRASH SEQUENCE","One of:[index]","enum",null,true,false)},
            {"DECISION ALTITUDE MSL",new SimVarDefinition("DECISION ALTITUDE MSL","Design decision altitude above mean sea level","feet",ConvertType("float64"),true,false)},
            {"DECISION HEIGHT",new SimVarDefinition("DECISION HEIGHT","Design decision height","feet",ConvertType("float64"),true,false)},
            {"DESIGN SPEED VC",new SimVarDefinition("DESIGN SPEED VC","Design speed at VC","feet per second",null,true,false)},
            {"DESIGN SPEED VS0",new SimVarDefinition("DESIGN SPEED VS0","Design speed at VS0","feet per second",null,true,false)},
            {"DESIGN SPEED VS1",new SimVarDefinition("DESIGN SPEED VS1","Design speed at VS1","feet per second",null,true,false)},
            {"DISK BANK ANGLE",new SimVarDefinition("DISK BANK ANGLE","Main rotor bank angle (helicopters only)","radians",ConvertType("float64"),true,false)},
            {"DISK BANK PCT",new SimVarDefinition("DISK BANK PCT","Main rotor bank percent (helicopters only)","percent over 100",ConvertType("float64"),true,false)},
            {"DISK CONING PCT",new SimVarDefinition("DISK CONING PCT","Main rotor coning percent (helicopters only)","percent over 100",null,true,false)},
            {"DISK PITCH ANGLE",new SimVarDefinition("DISK PITCH ANGLE","Main rotor pitch angle (helicopters only)","radians",ConvertType("float64"),true,false)},
            {"DISK PITCH PCT",new SimVarDefinition("DISK PITCH PCT","Main rotor pitch percent (helicopters only)","percent over 100",ConvertType("float64"),true,false)},
            {"DROPPABLE OBJECTS UI NAME",new SimVarDefinition("DROPPABLE OBJECTS UI NAME","Descriptive name, used in User Interface dialogs, of a droppable object","string",null,true,false)},
            {"DYNAMIC PRESSURE",new SimVarDefinition("DYNAMIC PRESSURE","Dynamic pressure","pounds per square foot",null,true,false)},
            {"ELECTRICAL OLD CHARGING AMPS",new SimVarDefinition("ELECTRICAL OLD CHARGING AMPS","Legacy, use ELECTRICAL BATTERY LOAD","amps",ConvertType("sint32"),true,false)},
            {"ELEVON DEFLECTION",new SimVarDefinition("ELEVON DEFLECTION","Elevon deflection","radians",ConvertType("float64"),true,false)},
            {"EMPTY WEIGHT",new SimVarDefinition("EMPTY WEIGHT","Empty weight of the aircraft","pounds",null,true,false)},
            {"EMPTY WEIGHT CROSS COUPLED MOI",new SimVarDefinition("EMPTY WEIGHT CROSS COUPLED MOI","Empty weigth cross coupled moment of inertia","slugs per feet squared",null,true,false)},
            {"EMPTY WEIGHT PITCH MOI",new SimVarDefinition("EMPTY WEIGHT PITCH MOI","Empty weight pitch moment of inertia","slugs per feet squared",null,true,false)},
            {"EMPTY WEIGHT ROLL MOI",new SimVarDefinition("EMPTY WEIGHT ROLL MOI","Empty weight roll moment of inertia","slugs per feet squared",null,true,false)},
            {"EMPTY WEIGHT YAW MOI",new SimVarDefinition("EMPTY WEIGHT YAW MOI","Empty weight yaw moment of inertia","slugs per feet squared",null,true,false)},
            {"ESTIMATED CRUISE SPEED",new SimVarDefinition("ESTIMATED CRUISE SPEED","Estimated cruise speed","feet per second",null,true,false)},
            {"FIRE BOTTLE DISCHARGED",new SimVarDefinition("FIRE BOTTLE DISCHARGED","True if the fire bottle is discharged.","bool",ConvertType("bool"),true,false)},
            {"FIRE BOTTLE SWITCH",new SimVarDefinition("FIRE BOTTLE SWITCH","True if the fire bottle switch is on.","bool",ConvertType("bool"),true,false)},
            {"FUEL SELECTED TRANSFER MODE",new SimVarDefinition("FUEL SELECTED TRANSFER MODE","One of:[index]","enum",null,true,false)},
            {"FULL THROTTLE THRUST TO WEIGHT RATIO",new SimVarDefinition("FULL THROTTLE THRUST TO WEIGHT RATIO","Full throttle thrust to weight ratio","number",null,true,false)},
            {"GPWS SYSTEM ACTIVE",new SimVarDefinition("GPWS SYSTEM ACTIVE","True if the Ground Proximity Warning System is active","bool",ConvertType("bool"),false,false)},
            {"GPWS WARNING",new SimVarDefinition("GPWS WARNING","True if Ground Proximity Warning System installed.","bool",ConvertType("enum"),true,false)},
            {"G FORCE",new SimVarDefinition("G FORCE","Current g force","gforce",ConvertType("sint16"),false,true)},
            {"HYDRAULIC SWITCH",new SimVarDefinition("HYDRAULIC SWITCH","True if hydraulic switch is on","bool",null,true,false)},
            {"INDUCTOR COMPASS HEADING REF",new SimVarDefinition("INDUCTOR COMPASS HEADING REF","Inductor compass heading","radians",null,true,false)},
            {"INDUCTOR COMPASS PERCENT DEVIATION",new SimVarDefinition("INDUCTOR COMPASS PERCENT DEVIATION","Inductor compass deviation reading","percent over 100",null,true,false)},
            {"IS ALTITUDE FREEZE ON",new SimVarDefinition("IS ALTITUDE FREEZE ON","True if the altitude of the aircraft is frozen.","bool",ConvertType("bool"),true,false)},
            {"IS ATTITUDE FREEZE ON",new SimVarDefinition("IS ATTITUDE FREEZE ON","True if the attitude (pitch, bank and heading) of the aircraft is frozen.","bool",ConvertType("bool"),true,false)},
            {"IS LATITUDE LONGITUDE FREEZE ON",new SimVarDefinition("IS LATITUDE LONGITUDE FREEZE ON","True if the lat/lon of the aircraft (either user or AI controlled) is frozen. If this variable returns true, itmeans that the latitude and longitude of theaircraft are not beingcontrolled by ESP, so enabling, for example, a SimConnect client to control the position of the aircraft. Thiscan also apply to altitude and attitude.","bool",ConvertType("bool"),true,false)},
            {"IS SLEW ACTIVE",new SimVarDefinition("IS SLEW ACTIVE","True if slew is active","bool",null,false,true)},
            {"IS SLEW ALLOWED",new SimVarDefinition("IS SLEW ALLOWED","True if slew is enabled","bool",null,false,true)},
            {"IS USER SIM",new SimVarDefinition("IS USER SIM","Is this the user loaded aircraft","bool",null,true,false)},
            {"LINEAR CL ALPHA",new SimVarDefinition("LINEAR CL ALPHA","Linear CL alpha","per radian",null,true,false)},
            {"MAGNETIC COMPASS",new SimVarDefinition("MAGNETIC COMPASS","Compass reading","degrees",ConvertType("float64"),true,false)},
            {"MANUAL FUEL PUMP HANDLE",new SimVarDefinition("MANUAL FUEL PUMP HANDLE","Position of manual fuel pump handle. 100 is fully deployed.","percent over 100",null,true,false)},
            {"MANUAL INSTRUMENT LIGHTS",new SimVarDefinition("MANUAL INSTRUMENT LIGHTS","True if instrument lights are set manually","bool",null,true,false)},
            {"MAX GROSS WEIGHT",new SimVarDefinition("MAX GROSS WEIGHT","Maximum gross weight of the aircaft","pounds",null,true,false)},
            {"MAX RATED ENGINE RPM",new SimVarDefinition("MAX RATED ENGINE RPM","Maximum rated rpm","rpm",null,true,false)},
            {"MIN DRAG VELOCITY",new SimVarDefinition("MIN DRAG VELOCITY","Minimum drag velocity","feet per second",null,true,false)},
            {"NAV GS LLAF64",new SimVarDefinition("NAV GS LLAF64","Nav GS latitude, longitude, altitude","lla structure",null,true,false)},
            {"NAV VOR LLAF64",new SimVarDefinition("NAV VOR LLAF64","Nav VOR latitude, longitude, altitude","lla structure",null,true,false)},
            {"PANEL ANTI ICE SWITCH",new SimVarDefinition("PANEL ANTI ICE SWITCH","True if panel anti-ice switch is on","bool",null,true,false)},
            {"PAYLOAD STATION COUNT",new SimVarDefinition("PAYLOAD STATION COUNT","Number of payload stations","number",null,true,false)},
            {"PAYLOAD STATION NAME",new SimVarDefinition("PAYLOAD STATION NAME","Descriptive name for payload station","string",null,true,false)},
            {"PAYLOAD STATION WEIGHT",new SimVarDefinition("PAYLOAD STATION WEIGHT","Individual payload station weight","pounds",null,false,false)},
            {"PITOT ICE PCT",new SimVarDefinition("PITOT ICE PCT","Amount of pitot ice. 100 is fully iced.","percent over 100",null,true,false)},
            {"PRESSURE ALTITUDE",new SimVarDefinition("PRESSURE ALTITUDE","Altitude reading","meters",null,true,false)},
            {"PRESSURIZATION CABIN ALTITUDE",new SimVarDefinition("PRESSURIZATION CABIN ALTITUDE","The current altitude of the cabin pressurization..","feet",ConvertType("float64"),true,false)},
            {"PRESSURIZATION CABIN ALTITUDE GOAL",new SimVarDefinition("PRESSURIZATION CABIN ALTITUDE GOAL","The set altitude of the cabin pressurization.","feet",ConvertType("float64"),true,false)},
            {"PRESSURIZATION CABIN ALTITUDE RATE",new SimVarDefinition("PRESSURIZATION CABIN ALTITUDE RATE","The rate at which cabin pressurization changes.","feet per second",ConvertType("float64"),true,false)},
            {"PRESSURIZATION DUMP SWITCH",new SimVarDefinition("PRESSURIZATION DUMP SWITCH","True if the cabin pressurization dump switch is on.","bool",ConvertType("bool"),true,false)},
            {"PRESSURIZATION PRESSURE DIFFERENTIAL",new SimVarDefinition("PRESSURIZATION PRESSURE DIFFERENTIAL","The difference in pressure between the set altitude pressurization and thecurrent pressurization.","pounds per square foot",ConvertType("float64"),true,false)},
            {"PROP AUTO CRUISE ACTIVE",new SimVarDefinition("PROP AUTO CRUISE ACTIVE","True if prop auto cruise active","bool",null,true,false)},
            {"PROP BETA MAX",new SimVarDefinition("PROP BETA MAX","Prop beta max","radians",null,true,false)},
            {"PROP BETA MIN",new SimVarDefinition("PROP BETA MIN","Prop beta min","radians",null,true,false)},
            {"PROP BETA MIN REVERSE",new SimVarDefinition("PROP BETA MIN REVERSE","Prop beta min reverse","radians",null,true,false)},
            {"PROP ROTATION ANGLE",new SimVarDefinition("PROP ROTATION ANGLE","Prop rotation angle","radians",null,true,false)},
            {"PUSHBACK ANGLE",new SimVarDefinition("PUSHBACK ANGLE","Pushback angle (the heading of the tug)","radians",null,true,false)},
            {"PUSHBACK CONTACTX",new SimVarDefinition("PUSHBACK CONTACTX","The towpoint position, relative to the aircrafts datum reference point.","feet",null,true,false)},
            {"PUSHBACK CONTACTY",new SimVarDefinition("PUSHBACK CONTACTY","Pushback contact position in vertical direction","feet",null,true,false)},
            {"PUSHBACK CONTACTZ",new SimVarDefinition("PUSHBACK CONTACTZ","Pushback contact position in fore/aft direction","feet",null,true,false)},
            {"PUSHBACK WAIT",new SimVarDefinition("PUSHBACK WAIT","True if waiting for pushback.","bool",null,true,false)},
            {"RAD INS SWITCH",new SimVarDefinition("RAD INS SWITCH","True if Rad INS switch on","bool",ConvertType("bool32"),true,false)},
            {"REALISM",new SimVarDefinition("REALISM","General realism percent","number",null,false,false)},
            {"REALISM CRASH DETECTION",new SimVarDefinition("REALISM CRASH DETECTION","True indicates crash detection is turned on.","bool",null,true,false)},
            {"REALISM CRASH WITH OTHERS",new SimVarDefinition("REALISM CRASH WITH OTHERS","True indicates crashing with other aircraft is possible.","bool",null,true,false)},
            {"ROTOR ROTATION ANGLE",new SimVarDefinition("ROTOR ROTATION ANGLE","Main rotor rotation angle (helicopters only)","radians",null,true,false)},
            {"RUDDER PEDAL INDICATOR",new SimVarDefinition("RUDDER PEDAL INDICATOR","Rudder pedal position","position",ConvertType("sint16"),true,false)},
            {"SEMIBODY LOADFACTOR Y",new SimVarDefinition("SEMIBODY LOADFACTOR Y","Semibody loadfactor x and z are not supported.","number",null,true,false)},
            {"SEMIBODY LOADFACTOR YDOT",new SimVarDefinition("SEMIBODY LOADFACTOR YDOT","Semibody loadfactory ydot","per second",null,true,false)},
            {"SIGMA SQRT",new SimVarDefinition("SIGMA SQRT","Sigma sqrt","number",null,true,false)},
            {"SIMULATED RADIUS",new SimVarDefinition("SIMULATED RADIUS","Simulated radius","feet",null,true,false)},
            {"SIM DISABLED",new SimVarDefinition("SIM DISABLED","Is sim disabled","bool",null,false,false)},
            {"STALL ALPHA",new SimVarDefinition("STALL ALPHA","Stall alpha","radians",ConvertType("float64"),true,false)},
            {"STATIC CG TO GROUND",new SimVarDefinition("STATIC CG TO GROUND","Static CG to ground","feet",null,true,false)},
            {"STATIC PITCH",new SimVarDefinition("STATIC PITCH","Static pitch","radians",null,true,false)},
            {"STRUCTURAL ICE PCT",new SimVarDefinition("STRUCTURAL ICE PCT","Amount of ice on aircraft structure. 100 is fully iced.","percent over 100",ConvertType("float64"),true,false)},
            {"SURFACE CONDITION",new SimVarDefinition("SURFACE CONDITION","One of:[index]","enum",null,true,false)},
            {"SURFACE INFO VALID",new SimVarDefinition("SURFACE INFO VALID","True indicates SURFACE CONDITION is meaningful.","bool",null,true,false)},
            {"TOTAL VELOCITY",new SimVarDefinition("TOTAL VELOCITY","Velocity regardless of direction. For example, if a helicopter is ascending vertically at 100 fps, getting this variable will return 100.","feet per second",ConvertType("float64"),true,false)},
            {"TOTAL WEIGHT",new SimVarDefinition("TOTAL WEIGHT","Total weight of the aircraft","pounds",null,true,false)},
            {"TOTAL WEIGHT CROSS COUPLED MOI",new SimVarDefinition("TOTAL WEIGHT CROSS COUPLED MOI","Total weight cross coupled moment of inertia","slugs per feet squared",null,true,false)},
            {"TOTAL WEIGHT PITCH MOI",new SimVarDefinition("TOTAL WEIGHT PITCH MOI","Total weight pitch moment of inertia","slugs per feet squared",null,true,false)},
            {"TOTAL WEIGHT ROLL MOI",new SimVarDefinition("TOTAL WEIGHT ROLL MOI","Total weight roll moment of inertia","slugs per feet squared",null,true,false)},
            {"TOTAL WEIGHT YAW MOI",new SimVarDefinition("TOTAL WEIGHT YAW MOI","Total weight yaw moment of inertia","slugs per feet squared",null,true,false)},
            {"TOW CONNECTION",new SimVarDefinition("TOW CONNECTION","True if a towline is connected to both tow plane and glider.","bool",null,true,false)},
            {"TOW RELEASE HANDLE",new SimVarDefinition("TOW RELEASE HANDLE","Position of tow release handle. 100 is fully deployed.","percent over 100",ConvertType("float64"),true,false)},
            {"TRUE AIRSPEED SELECTED",new SimVarDefinition("TRUE AIRSPEED SELECTED","True if True Airspeed has been selected","bool",null,false,false)},
            {"TURN INDICATOR RATE",new SimVarDefinition("TURN INDICATOR RATE","Turn indicator reading","radians per second",ConvertType("float64"),true,false)},
            {"TURN INDICATOR SWITCH",new SimVarDefinition("TURN INDICATOR SWITCH","True if turn indicator switch is on","bool",ConvertType("float64"),true,false)},
            {"TYPICAL DESCENT RATE",new SimVarDefinition("TYPICAL DESCENT RATE","Normal descent rate","feet per minute",null,true,false)},
            {"USER INPUT ENABLED",new SimVarDefinition("USER INPUT ENABLED","Is input allowed from the user","bool",null,false,false)},
            {"VARIOMETER RATE",new SimVarDefinition("VARIOMETER RATE","Variometer rate","feet per second",ConvertType("float64"),true,false)},
            {"VARIOMETER SWITCH",new SimVarDefinition("VARIOMETER SWITCH","True if the variometer switch is on","bool",ConvertType("bool"),true,false)},
            {"VISUAL MODEL RADIUS",new SimVarDefinition("VISUAL MODEL RADIUS","Model radius","meters",null,true,false)},
            {"WATER BALLAST VALVE",new SimVarDefinition("WATER BALLAST VALVE","True if water ballast valve is available","bool",ConvertType("bool"),true,false)},
            {"WING AREA",new SimVarDefinition("WING AREA","Total wing area","square feet",null,true,false)},
            {"WING SPAN",new SimVarDefinition("WING SPAN","Total wing span","feet",null,true,false)},
            {"YAW STRING ANGLE",new SimVarDefinition("YAW STRING ANGLE","The yaw string angle. Yaw strings are attached to gliders as visible indicators of the yaw angle. An animation of this is not implemented in ESP.","radians",null,true,false)},
            {"YAW STRING PCT EXTENDED",new SimVarDefinition("YAW STRING PCT EXTENDED","Yaw string angle as a percentage","percent over 100",null,true,false)},
            {"YOKE X INDICATOR",new SimVarDefinition("YOKE X INDICATOR","Yoke position in horizontal direction","position",null,true,false)},
            {"YOKE Y INDICATOR",new SimVarDefinition("YOKE Y INDICATOR","Yoke position in vertical direction","position",ConvertType("sint16"),true,false)},
            {"ZERO LIFT ALPHA",new SimVarDefinition("ZERO LIFT ALPHA","Zero lift alpha","radians",null,true,false)},
            {"APPLY HEAT TO SYSTEMS",new SimVarDefinition("APPLY HEAT TO SYSTEMS","Used when too close to a fire.","bool",null,false,false)},
            {"CANOPY OPEN",new SimVarDefinition("CANOPY OPEN","Percent primary door/exit open","percent over 100",ConvertType("float64"),false,false)},
            {"CARB HEAT AVAILABLE",new SimVarDefinition("CARB HEAT AVAILABLE","True if carb heat available","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT AUTOPILOT ON",new SimVarDefinition("CIRCUIT AUTOPILOT ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT AUTO BRAKES ON",new SimVarDefinition("CIRCUIT AUTO BRAKES ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT AUTO FEATHER ON",new SimVarDefinition("CIRCUIT AUTO FEATHER ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT AVIONICS ON",new SimVarDefinition("CIRCUIT AVIONICS ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT FLAP MOTOR ON",new SimVarDefinition("CIRCUIT FLAP MOTOR ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT GEAR MOTOR ON",new SimVarDefinition("CIRCUIT GEAR MOTOR ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT GEAR WARNING ON",new SimVarDefinition("CIRCUIT GEAR WARNING ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT GENERAL PANEL ON",new SimVarDefinition("CIRCUIT GENERAL PANEL ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT HYDRAULIC PUMP ON",new SimVarDefinition("CIRCUIT HYDRAULIC PUMP ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT MARKER BEACON ON",new SimVarDefinition("CIRCUIT MARKER BEACON ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT PITOT HEAT ON",new SimVarDefinition("CIRCUIT PITOT HEAT ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT PROP SYNC ON",new SimVarDefinition("CIRCUIT PROP SYNC ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,false)},
            {"CIRCUIT STANDY VACUUM ON",new SimVarDefinition("CIRCUIT STANDY VACUUM ON","Is electrical power available to this circuit","bool",ConvertType("bool"),true,true)},
            {"DROPPABLE OBJECTS COUNT",new SimVarDefinition("DROPPABLE OBJECTS COUNT","The number of droppable objects at the station number identified by the index.","number",null,true,false)},
            {"DROPPABLE OBJECTS TYPE",new SimVarDefinition("DROPPABLE OBJECTS TYPE","The type of droppable object at the station number identified by the index.","string",null,false,false)},
            {"ELECTRICAL AVIONICS BUS AMPS",new SimVarDefinition("ELECTRICAL AVIONICS BUS AMPS","Avionics bus current","amperes",ConvertType("float64"),false,false)},
            {"ELECTRICAL AVIONICS BUS VOLTAGE",new SimVarDefinition("ELECTRICAL AVIONICS BUS VOLTAGE","Avionics bus voltage","volts",ConvertType("float64"),false,false)},
            {"ELECTRICAL BATTERY BUS AMPS",new SimVarDefinition("ELECTRICAL BATTERY BUS AMPS","Battery bus current","amperes",ConvertType("float64"),false,false)},
            {"ELECTRICAL BATTERY BUS VOLTAGE",new SimVarDefinition("ELECTRICAL BATTERY BUS VOLTAGE","Battery bus voltage","volts",ConvertType("float64"),false,false)},
            {"ELECTRICAL BATTERY LOAD",new SimVarDefinition("ELECTRICAL BATTERY LOAD","Battery load","amperes",ConvertType("float64"),false,false)},
            {"ELECTRICAL BATTERY VOLTAGE",new SimVarDefinition("ELECTRICAL BATTERY VOLTAGE","Battery voltage","volts",ConvertType("float64"),false,false)},
            {"ELECTRICAL GENALT BUS AMPS",new SimVarDefinition("ELECTRICAL GENALT BUS AMPS","Genalt bus current (takes engine index)","amperes",ConvertType("float64"),false,false)},
            {"ELECTRICAL GENALT BUS VOLTAGE",new SimVarDefinition("ELECTRICAL GENALT BUS VOLTAGE","Genalt bus voltage (takes engine index)","volts",ConvertType("float64"),false,false)},
            {"ELECTRICAL HOT BATTERY BUS AMPS",new SimVarDefinition("ELECTRICAL HOT BATTERY BUS AMPS","Current available when battery switch is turned off","amperes",ConvertType("float64"),false,false)},
            {"ELECTRICAL HOT BATTERY BUS VOLTAGE",new SimVarDefinition("ELECTRICAL HOT BATTERY BUS VOLTAGE","Voltage available when battery switch is turned off","volts",ConvertType("float64"),false,false)},
            {"ELECTRICAL MAIN BUS AMPS",new SimVarDefinition("ELECTRICAL MAIN BUS AMPS","Main bus current","amperes",ConvertType("float64"),false,false)},
            {"ELECTRICAL MAIN BUS VOLTAGE",new SimVarDefinition("ELECTRICAL MAIN BUS VOLTAGE","Main bus voltage","volts",ConvertType("float64"),false,false)},
            {"ELECTRICAL MASTER BATTERY",new SimVarDefinition("ELECTRICAL MASTER BATTERY","Battery switch position","bool",ConvertType("bool"),false,true)},
            {"ELECTRICAL TOTAL LOAD AMPS",new SimVarDefinition("ELECTRICAL TOTAL LOAD AMPS","Total load amps","amperes",ConvertType("float64"),false,false)},
            {"ENGINE MIXURE AVAILABLE",new SimVarDefinition("ENGINE MIXURE AVAILABLE","True if engine mixture is available for prop engines. Obsolete value as mixture is always available. Spelling error in variable name.","bool",ConvertType("bool"),true,false)},
            {"FOLDING WING LEFT PERCENT",new SimVarDefinition("FOLDING WING LEFT PERCENT","Left folding wing position, 100 is fully folded","percent over 100",ConvertType("float64"),false,false)},
            {"FOLDING WING RIGHT PERCENT",new SimVarDefinition("FOLDING WING RIGHT PERCENT","Right folding wing position, 100 is fully folded","percent over 100",ConvertType("float64"),false,false)},
            {"HYDRAULIC PRESSURE",new SimVarDefinition("HYDRAULIC PRESSURE","Hydraulic system pressure. Indexes start at 1.","pound force per square foot",ConvertType("float64"),true,false)},
            {"HYDRAULIC RESERVOIR PERCENT",new SimVarDefinition("HYDRAULIC RESERVOIR PERCENT","Hydraulic pressure changes will follow changes to this variable. Indexes start at 1.","percent over 100",ConvertType("float64"),false,false)},
            {"HYDRAULIC SYSTEM INTEGRITY",new SimVarDefinition("HYDRAULIC SYSTEM INTEGRITY","Percent system functional","percent over 100",ConvertType("float64"),true,false)},
            {"IS TAIL DRAGGER",new SimVarDefinition("IS TAIL DRAGGER","True if the aircraft is a taildragger","bool",ConvertType("bool"),true,false)},
            {"PITOT HEAT",new SimVarDefinition("PITOT HEAT","Pitot heat active","bool",ConvertType("bool32"),true,true)},
            {"PITOT HEAT SWITCH",new SimVarDefinition("PITOT HEAT SWITCH","Pitot heat switch state","enum",ConvertType("enum"),true,true)},
            {"PUSHBACK STATE",new SimVarDefinition("PUSHBACK STATE","Type of pushback :[index]","enum",null,false,false)},
            {"SMOKESYSTEM AVAILABLE",new SimVarDefinition("SMOKESYSTEM AVAILABLE","Smoke system available","bool",null,true,false)},
            {"SMOKE ENABLE",new SimVarDefinition("SMOKE ENABLE","Set to True to activate the smoke system, if one is available (for example, on the Extra).","bool",ConvertType("bool"),false,true)},
            {"SPOILER AVAILABLE",new SimVarDefinition("SPOILER AVAILABLE","True if spoiler system available","bool",ConvertType("bool"),true,false)},
            {"STALL HORN AVAILABLE",new SimVarDefinition("STALL HORN AVAILABLE","True if stall alarm available","bool",ConvertType("bool"),true,false)},
            {"STROBES AVAILABLE",new SimVarDefinition("STROBES AVAILABLE","True if strobe lights are available","bool",ConvertType("bool"),true,false)},
            {"STRUCTURAL DEICE SWITCH",new SimVarDefinition("STRUCTURAL DEICE SWITCH","True if the aircraft structure deice switch is on","bool",ConvertType("bool"),true,false)},
            {"TAILHOOK POSITION",new SimVarDefinition("TAILHOOK POSITION","Percent tail hook extended","percent over 100",ConvertType("float64"),false,false)},
            {"TOE BRAKES AVAILABLE",new SimVarDefinition("TOE BRAKES AVAILABLE","True if toe brakes are available","bool",ConvertType("bool"),true,false)},
            {"WINDSHIELD DEICE SWITCH",new SimVarDefinition("WINDSHIELD DEICE SWITCH","True if the aircraft windshield deice switch is on","bool",ConvertType("bool"),true,false)},
            {"ACCELERATION BODY X",new SimVarDefinition("ACCELERATION BODY X","Acceleration relative to aircraft axis, in east/west direction","feet per second squared",ConvertType("float64"),false,false)},
            {"ACCELERATION BODY Y",new SimVarDefinition("ACCELERATION BODY Y","Acceleration relative to aircraft axis, in vertical direction","feet per second squared",ConvertType("float64"),false,false)},
            {"ACCELERATION BODY Z",new SimVarDefinition("ACCELERATION BODY Z","Acceleration relative to aircraft axis, in north/south direction","feet per second squared",ConvertType("float64"),false,false)},
            {"ACCELERATION WORLD X",new SimVarDefinition("ACCELERATION WORLD X","Acceleration relative to earth, in east/west direction","feet per second squared",ConvertType("float64"),false,false)},
            {"ACCELERATION WORLD Y",new SimVarDefinition("ACCELERATION WORLD Y","Acceleration relative to earth, in vertical direction","feet per second squared",ConvertType("float64"),false,false)},
            {"ACCELERATION WORLD Z",new SimVarDefinition("ACCELERATION WORLD Z","Acceleration relative to earth, in north/south direction","feet per second squared",ConvertType("float64"),false,false)},
            {"AILERON TRIM DISABLED",new SimVarDefinition("AILERON TRIM DISABLED","Whether or not the Aileron Trim has been disabled.","bool",ConvertType("bool"),true,false)},
            {"ATC AIRPORT IS TOWERED",new SimVarDefinition("ATC AIRPORT IS TOWERED","If the airport is controlled, this boolean is true","bool",ConvertType("bool"),true,false)},
            {"ATC CLEARED LANDING",new SimVarDefinition("ATC CLEARED LANDING","Whether the ATC has cleared the plane for landing.","bool",ConvertType("bool"),true,false)},
            {"ATC CLEARED TAKEOFF",new SimVarDefinition("ATC CLEARED TAKEOFF","Whether the ATC has cleared the plane for takeoff.","bool",ConvertType("bool"),true,false)},
            {"ATC CLEARED TAXI",new SimVarDefinition("ATC CLEARED TAXI","Whether the ATC has cleared the plane for taxi.","bool",ConvertType("bool"),true,false)},
            {"ATC RUNWAY AIRPORT NAME",new SimVarDefinition("ATC RUNWAY AIRPORT NAME","The name of the airport of the runway assigned by the ATC. Returns \" if no runway is assigned.","string",null,true,false)},
            {"ATC RUNWAY DISTANCE",new SimVarDefinition("ATC RUNWAY DISTANCE","This float represents the distance between the player’s plane and the center of the runway selected by the ATC. (Not previously in FSX)","meters",ConvertType("float64"),true,false)},
            {"ATC RUNWAY END DISTANCE",new SimVarDefinition("ATC RUNWAY END DISTANCE","This is a float corresponding to the horizontal distance between the player’s plane and the end of the runway selected by the ATC. (Exposes values that previously existed in FSX)","meters",ConvertType("float64"),true,false)},
            {"ATC RUNWAY HEADING DEGREES TRUE",new SimVarDefinition("ATC RUNWAY HEADING DEGREES TRUE","This float represents the true heading of the runway selected by the ATC. (Not previsouly in FSX)","degrees",ConvertType("float64"),true,false)},
            {"ATC RUNWAY LENGTH",new SimVarDefinition("ATC RUNWAY LENGTH","The length of the runway assigned by the ATC. Returns -1 if no runway is assigned.","meters",ConvertType("float64"),true,false)},
            {"ATC RUNWAY RELATIVE POSITION X",new SimVarDefinition("ATC RUNWAY RELATIVE POSITION X","This is a float corresponding to the player’s main gear relative X (transverse) position on the runway selected by the ATC. (Exposes values that previously existed in FSX)","meters",ConvertType("float64"),true,false)},
            {"ATC RUNWAY RELATIVE POSITION Y",new SimVarDefinition("ATC RUNWAY RELATIVE POSITION Y","This is a float corresponding to the player’s main gear relative Y (height) position on the runway selected by the ATC. (Exposes values that previously existed in FSX)","meters",ConvertType("float64"),true,false)},
            {"ATC RUNWAY RELATIVE POSITION Z",new SimVarDefinition("ATC RUNWAY RELATIVE POSITION Z","This is a float corresponding to the player’s main gear relative Z (longitudinal) position on the runway selected by the ATC. (Exposes values that previously existed in FSX)","meters",ConvertType("float64"),true,false)},
            {"ATC RUNWAY SELECTED",new SimVarDefinition("ATC RUNWAY SELECTED","This is a boolean corresponding to whether or not the ATC has pre-selected a runway for the player’s plane. If this is false, every other ATC_RUNWAY SimVar will return default values. (Exposes values that previously existed in FSX)","bool",ConvertType("bool"),true,false)},
            {"ATC RUNWAY START DISTANCE",new SimVarDefinition("ATC RUNWAY START DISTANCE","This is a float corresponding to the horizontal distance between the player’s plane and the start of the runway selected by the ATC. (Exposes values that previously existed in FSX)","meters",ConvertType("float64"),true,false)},
            {"ATC RUNWAY TDPOINT RELATIVE POSITION X",new SimVarDefinition("ATC RUNWAY TDPOINT RELATIVE POSITION X","This float represents the player’s main gear relative X (transverse) position accorindg to the aiming point of the runway selected by the ATC. (Not previously in FSX)","meters",ConvertType("float64"),true,false)},
            {"ATC RUNWAY TDPOINT RELATIVE POSITION Y",new SimVarDefinition("ATC RUNWAY TDPOINT RELATIVE POSITION Y","This float represents the player’s main gear relative Y (height) position accorindg to the aiming point of the runway selected by the ATC. (Not previously in FSX)","meters",ConvertType("float64"),true,false)},
            {"ATC RUNWAY TDPOINT RELATIVE POSITION Z",new SimVarDefinition("ATC RUNWAY TDPOINT RELATIVE POSITION Z","This float represents the player’s main relative Z (longitudinal) position accorindg to the aiming point of the runway selected by the ATC. (Not previously in FSX)","meters",ConvertType("float64"),true,false)},
            {"ATC RUNWAY WIDTH",new SimVarDefinition("ATC RUNWAY WIDTH","The width of the runway assigned by the ATC. Returns -1 if no runway is assigned.","meters",ConvertType("float64"),true,false)},
            {"ELEVATOR TRIM DISABLED",new SimVarDefinition("ELEVATOR TRIM DISABLED","Whether or not the Elevator Trim has been disabled.","bool",ConvertType("bool"),true,false)},
            {"EYEPOINT POSITION",new SimVarDefinition("EYEPOINT POSITION","The eyepoint position relative to the reference datum position for the aircraft.","simconnect_data_xyz structure, feet",null,true,false)},
            {"GROUND ALTITUDE",new SimVarDefinition("GROUND ALTITUDE","Altitude of surface","meters",ConvertType("sint32"),true,false)},
            {"GROUND VELOCITY",new SimVarDefinition("GROUND VELOCITY","Speed relative to the earths surface","knots",null,true,false)},
            {"INCIDENCE ALPHA",new SimVarDefinition("INCIDENCE ALPHA","Angle of attack","radians",ConvertType("float64"),true,false)},
            {"INCIDENCE BETA",new SimVarDefinition("INCIDENCE BETA","Sideslip angle","radians",ConvertType("float64"),true,false)},
            {"MAGVAR",new SimVarDefinition("MAGVAR","Magnetic variation","degrees",ConvertType("angl16"),true,false)},
            {"ON ANY RUNWAY",new SimVarDefinition("ON ANY RUNWAY","Whether or not the plane is currently on a runway.","bool",ConvertType("bool"),true,false)},
            {"PLANE ALTITUDE",new SimVarDefinition("PLANE ALTITUDE","Altitude of aircraft","feet",ConvertType("float64"),false,false)},
            {"PLANE ALT ABOVE GROUND",new SimVarDefinition("PLANE ALT ABOVE GROUND","Altitude above the surface","feet",ConvertType("float64"),false,false)},
            {"PLANE ALT ABOVE GROUND MINUS CG",new SimVarDefinition("PLANE ALT ABOVE GROUND MINUS CG","Altitude above the surface minus CG","feet",ConvertType("float64"),false,false)},
            {"PLANE BANK DEGREES",new SimVarDefinition("PLANE BANK DEGREES","Bank angle, although the name mentions degrees the units used are radians","radians",ConvertType("float64"),false,false)},
            {"PLANE HEADING DEGREES MAGNETIC",new SimVarDefinition("PLANE HEADING DEGREES MAGNETIC","Heading relative to magnetic north, although the name mentions degrees the units used are radians","radians",ConvertType("float64"),false,false)},
            {"PLANE HEADING DEGREES TRUE",new SimVarDefinition("PLANE HEADING DEGREES TRUE","Heading relative to true north, although the name mentions degrees the units used are radians","radians",ConvertType("float64"),false,false)},
            {"PLANE LATITUDE",new SimVarDefinition("PLANE LATITUDE","Latitude of aircraft, North is positive, South negative","radians",null,false,false)},
            {"PLANE LONGITUDE",new SimVarDefinition("PLANE LONGITUDE","Longitude of aircraft, East is positive, West negative","radians",null,false,false)},
            {"PLANE PITCH DEGREES",new SimVarDefinition("PLANE PITCH DEGREES","Pitch angle, although the name mentions degrees the units used are radians","radians",ConvertType("float64"),false,false)},
            {"PLANE TOUCHDOWN BANK DEGREES",new SimVarDefinition("PLANE TOUCHDOWN BANK DEGREES","This float represents the bank of the player’s plane from the last touchdown. (Not previsouly in FSX)","degrees",ConvertType("float64"),true,false)},
            {"PLANE TOUCHDOWN HEADING DEGREES MAGNETIC",new SimVarDefinition("PLANE TOUCHDOWN HEADING DEGREES MAGNETIC","This float represents the magnetic heading of the player’s plane from the last touchdown. (Not previsouly in FSX)","degrees",ConvertType("float64"),true,false)},
            {"PLANE TOUCHDOWN HEADING DEGREES TRUE",new SimVarDefinition("PLANE TOUCHDOWN HEADING DEGREES TRUE","This float represents the true heading of the player’s plane from the last touchdown. (Not previsouly in FSX)","degrees",ConvertType("float64"),true,false)},
            {"PLANE TOUCHDOWN LATITUDE",new SimVarDefinition("PLANE TOUCHDOWN LATITUDE","This float represents the plane latitude for the last touchdown. (Not previsouly in FSX)","radians",ConvertType("float64"),true,false)},
            {"PLANE TOUCHDOWN LONGITUDE",new SimVarDefinition("PLANE TOUCHDOWN LONGITUDE","This float represents the plane longitude for the last touchdown. (Not previsouly in FSX)","radians",ConvertType("float64"),true,false)},
            {"PLANE TOUCHDOWN NORMAL VELOCITY",new SimVarDefinition("PLANE TOUCHDOWN NORMAL VELOCITY","This float represents the player’s plane speed according to ground normal from the last touchdown. (Not previsouly in FSX)","feet per second",ConvertType("float64"),true,false)},
            {"PLANE TOUCHDOWN PITCH DEGREES",new SimVarDefinition("PLANE TOUCHDOWN PITCH DEGREES","This float represents the pitch of the player’s plane from the last touchdown. (Not previsouly in FSX)","degrees",ConvertType("float64"),true,false)},
            {"RELATIVE WIND VELOCITY BODY X",new SimVarDefinition("RELATIVE WIND VELOCITY BODY X","Lateral speed relative to wind","feet per second",ConvertType("float64"),true,false)},
            {"RELATIVE WIND VELOCITY BODY Y",new SimVarDefinition("RELATIVE WIND VELOCITY BODY Y","Vertical speed relative to wind","feet per second",ConvertType("float64"),true,false)},
            {"RELATIVE WIND VELOCITY BODY Z",new SimVarDefinition("RELATIVE WIND VELOCITY BODY Z","Longitudinal speed relative to wind","feet per second",ConvertType("float64"),true,false)},
            {"ROTATION VELOCITY BODY X",new SimVarDefinition("ROTATION VELOCITY BODY X","Rotation relative to aircraft axis","feet per second",null,false,false)},
            {"ROTATION VELOCITY BODY Y",new SimVarDefinition("ROTATION VELOCITY BODY Y","Rotation relative to aircraft axis","feet per second",null,false,false)},
            {"ROTATION VELOCITY BODY Z",new SimVarDefinition("ROTATION VELOCITY BODY Z","Rotation relative to aircraft axis","feet per second",null,false,false)},
            {"RUDDER TRIM DISABLED",new SimVarDefinition("RUDDER TRIM DISABLED","Whether or not the Rudder Trim has been disabled.","bool",ConvertType("bool"),true,false)},
            {"SIM ON GROUND",new SimVarDefinition("SIM ON GROUND","On ground flag","bool",ConvertType("bool8"),true,false)},
            {"SLOPE TO ATC RUNWAY",new SimVarDefinition("SLOPE TO ATC RUNWAY","The slope between the plane and the expected landing position of the runway. Returns 0 if no runway is assigned.","radians",ConvertType("float64"),true,false)},
            {"STRUCT BODY ROTATION VELOCITY",new SimVarDefinition("STRUCT BODY ROTATION VELOCITY","The body rotation velocity. Individual body rotation values are in the Aircraft Position and Speed section.","simconnect_data_xyz structure, radians per second",null,true,false)},
            {"STRUCT BODY VELOCITY",new SimVarDefinition("STRUCT BODY VELOCITY","The object body velocity.","simconnect_data_xyz structure, feet per second",null,true,false)},
            {"STRUCT ENGINE POSITION",new SimVarDefinition("STRUCT ENGINE POSITION","The engine position relative to the reference datum position for the aircraft.","simconnect_data_xyz structure, feet.",null,true,false)},
            {"STRUCT EYEPOINT DYNAMIC ANGLE",new SimVarDefinition("STRUCT EYEPOINT DYNAMIC ANGLE","The angle of the eyepoint view. Zero, zero, zero is straight ahead.","simconnect_data_xyz structure, radians",null,true,false)},
            {"STRUCT EYEPOINT DYNAMIC OFFSET",new SimVarDefinition("STRUCT EYEPOINT DYNAMIC OFFSET","A variable offset away from the EYEPOINT POSITION","simconnect_data_xyz structure, feet",null,true,false)},
            {"STRUCT LATLONALT",new SimVarDefinition("STRUCT LATLONALT","Returns the latitude, longitude and altitude of the user aircraft.","simconnect_data_latlonaltstructure",null,true,false)},
            {"STRUCT LATLONALTPBH",new SimVarDefinition("STRUCT LATLONALTPBH","Returns the pitch, bank and heading of the user aircraft.","simconnect_data_latlonaltstructure",null,true,false)},
            {"STRUCT SURFACE RELATIVE VELOCITY",new SimVarDefinition("STRUCT SURFACE RELATIVE VELOCITY","The relative surface velocity.","simconnect_data_xyz structure, feet per second",null,true,false)},
            {"STRUCT WORLDVELOCITY",new SimVarDefinition("STRUCT WORLDVELOCITY","The world velocity.","simconnect_data_xyz structure, feet per second",null,true,false)},
            {"STRUCT WORLD ACCELERATION",new SimVarDefinition("STRUCT WORLD ACCELERATION","The world acceleration for each axis. Individual world acceleration values are in the Aircraft Position and Speed section.","simconnect_data_xyz structure, feet per second squared",null,true,false)},
            {"STRUCT WORLD ROTATION VELOCITY",new SimVarDefinition("STRUCT WORLD ROTATION VELOCITY","The world rotation velocity.","simconnect_data_xyz structure, radians per second",null,true,false)},
            {"SURFACE TYPE",new SimVarDefinition("SURFACE TYPE","Type of surface:[index]","enum",null,true,false)},
            {"TOTAL WORLD VELOCITY",new SimVarDefinition("TOTAL WORLD VELOCITY","Speed relative to the earths center","feet per second",ConvertType("float64"),true,false)},
            {"VELOCITY BODY X",new SimVarDefinition("VELOCITY BODY X","True lateral speed, relative to aircraft axis","feet per second",ConvertType("float64"),false,false)},
            {"VELOCITY BODY Y",new SimVarDefinition("VELOCITY BODY Y","True vertical speed, relative to aircraft axis","feet per second",ConvertType("float64"),false,false)},
            {"VELOCITY BODY Z",new SimVarDefinition("VELOCITY BODY Z","True longitudinal speed, relative to aircraft axis","feet per second",ConvertType("float64"),false,false)},
            {"VELOCITY WORLD X",new SimVarDefinition("VELOCITY WORLD X","Speed relative to earth, in East/West direction","feet per second",ConvertType("float64"),false,false)},
            {"VELOCITY WORLD Y",new SimVarDefinition("VELOCITY WORLD Y","Speed relative to earth, in vertical direction","feet per second",ConvertType("float64"),false,false)},
            {"VELOCITY WORLD Z",new SimVarDefinition("VELOCITY WORLD Z","Speed relative to earth, in North/South direction","feet per second",ConvertType("float64"),false,false)},
            {"WINDSHIELD WIND VELOCITY",new SimVarDefinition("WINDSHIELD WIND VELOCITY","Longitudinal speed of wind on the windshield","feet per second",ConvertType("float64"),true,false)},
            {"WING FLEX PCT",new SimVarDefinition("WING FLEX PCT","The current wing flex. Different values can be set for each wing (for example,during banking). Set an index of 1 for the left wing, and 2 for the right wing.","percent over 100",null,false,false)},
            {"ATC AIRLINE",new SimVarDefinition("ATC AIRLINE","Airline used by ATC","string (50)",null,false,false)},
            {"ATC FLIGHT NUMBER",new SimVarDefinition("ATC FLIGHT NUMBER","Flight Number used by ATC","string (6)",null,false,false)},
            {"ATC ID",new SimVarDefinition("ATC ID","ID used by ATC","string (10)",null,false,false)},
            {"ATC MODEL",new SimVarDefinition("ATC MODEL","Model used by ATC","string (10)",null,true,false)},
            {"ATC ON PARKING SPOT",new SimVarDefinition("ATC ON PARKING SPOT","Is ATC aircraft on parking spot","bool",null,true,false)},
            {"ATC TYPE",new SimVarDefinition("ATC TYPE","Type used by ATC","string (30)",null,true,false)},
            {"GPS APPROACH AIRPORT ID",new SimVarDefinition("GPS APPROACH AIRPORT ID","ID of airport","string",null,true,false)},
            {"GPS APPROACH APPROACH ID",new SimVarDefinition("GPS APPROACH APPROACH ID","ID of approach","string",null,true,false)},
            {"GPS APPROACH TRANSITION ID",new SimVarDefinition("GPS APPROACH TRANSITION ID","ID of approach transition","string",null,true,false)},
            {"GPS WP NEXT ID",new SimVarDefinition("GPS WP NEXT ID","ID of next GPS waypoint","string",null,true,false)},
            {"GPS WP PREV ID",new SimVarDefinition("GPS WP PREV ID","ID of previous GPS waypoint","string",null,true,false)},
            {"HSI STATION IDENT",new SimVarDefinition("HSI STATION IDENT","Tuned station identifier","string(6)",null,true,false)},
            {"TITLE",new SimVarDefinition("TITLE","Title from aircraft.cfg","variable length string",ConvertType("string"),true,false)},
            {"ELEVATOR TRIM NEUTRAL",new SimVarDefinition("ELEVATOR TRIM NEUTRAL","Elevator trim neutral","radians",ConvertType("float64"),true,false)},
            {"ENGINE CONTROL SELECT",new SimVarDefinition("ENGINE CONTROL SELECT","Selected engines (combination of bit flags)","mask",ConvertType("flags"),false,false)},
            {"ENGINE TYPE",new SimVarDefinition("ENGINE TYPE","Engine type:[index]","enum",null,true,false)},
            {"ENG ANTI ICE",new SimVarDefinition("ENG ANTI ICE","Anti-ice switch","bool",ConvertType("bool16"),true,false)},
            {"ENG COMBUSTION",new SimVarDefinition("ENG COMBUSTION","True if the engine is running","bool",null,true,false)},
            {"ENG CYLINDER HEAD TEMPERATURE",new SimVarDefinition("ENG CYLINDER HEAD TEMPERATURE","Engine cylinder head temperature","rankine",ConvertType("float64"),true,false)},
            {"ENG EXHAUST GAS TEMPERATURE",new SimVarDefinition("ENG EXHAUST GAS TEMPERATURE","Exhaust gas temperature","rankine",ConvertType("uint16"),true,false)},
            {"ENG EXHAUST GAS TEMPERATURE GES",new SimVarDefinition("ENG EXHAUST GAS TEMPERATURE GES","Governed engine setting","percent over 100",ConvertType("uint16"),true,false)},
            {"ENG FAILED",new SimVarDefinition("ENG FAILED","Failure flag","number",null,true,false)},
            {"ENG FUEL FLOW BUG POSITION",new SimVarDefinition("ENG FUEL FLOW BUG POSITION","Fuel flow reference","pounds per hour",ConvertType("float64"),true,false)},
            {"ENG FUEL FLOW GPH",new SimVarDefinition("ENG FUEL FLOW GPH","Engine fuel flow","gallons per hour",ConvertType("float64"),true,false)},
            {"ENG FUEL FLOW PPH",new SimVarDefinition("ENG FUEL FLOW PPH","Engine fuel flow","pounds per hour",ConvertType("float64"),true,false)},
            {"ENG HYDRAULIC PRESSURE",new SimVarDefinition("ENG HYDRAULIC PRESSURE","Engine hydraulic pressure","pounds per square foot",ConvertType("uint32"),true,false)},
            {"ENG HYDRAULIC QUANTITY",new SimVarDefinition("ENG HYDRAULIC QUANTITY","Engine hydraulic fluid quantity, as a percentage of total capacity","percent over 100",ConvertType("uint32"),true,false)},
            {"ENG MANIFOLD PRESSURE",new SimVarDefinition("ENG MANIFOLD PRESSURE","Engine manifold pressure.","inhg.",ConvertType("uint16"),true,false)},
            {"ENG MAX RPM",new SimVarDefinition("ENG MAX RPM","Maximum rpm","rpm",null,true,false)},
            {"ENG N1 RPM",new SimVarDefinition("ENG N1 RPM","Engine N1 rpm","rpm (0 to 16384 = 0 to 100%)",ConvertType("uint16"),true,false)},
            {"ENG N2 RPM",new SimVarDefinition("ENG N2 RPM","Engine N2 rpm","rpm(0 to 16384 = 0 to 100%)",ConvertType("uint16"),true,false)},
            {"ENG OIL PRESSURE",new SimVarDefinition("ENG OIL PRESSURE","Engine oil pressure","pounds per square foot",ConvertType("uint16"),true,false)},
            {"ENG OIL QUANTITY",new SimVarDefinition("ENG OIL QUANTITY","Engine oil quantitiy as a percentage of full capacity","percent over 100",ConvertType("uint32"),true,false)},
            {"ENG OIL TEMPERATURE",new SimVarDefinition("ENG OIL TEMPERATURE","Engine oil temperature","rankine",ConvertType("uint16"),true,false)},
            {"ENG ON FIRE",new SimVarDefinition("ENG ON FIRE","On fire state","bool",ConvertType("bool"),false,false)},
            {"ENG PRESSURE RATIO",new SimVarDefinition("ENG PRESSURE RATIO","Engine pressure ratio","ratio (0-16384)",ConvertType("uint16"),true,false)},
            {"ENG RPM ANIMATION PERCENT",new SimVarDefinition("ENG RPM ANIMATION PERCENT","Percent max rated rpmused for visual animation","percent",null,true,false)},
            {"ENG RPM SCALER",new SimVarDefinition("ENG RPM SCALER","Obsolete","scalar",ConvertType("uint16"),true,false)},
            {"ENG TORQUE",new SimVarDefinition("ENG TORQUE","Torque","foot pounds",ConvertType("float64"),true,false)},
            {"ENG VIBRATION",new SimVarDefinition("ENG VIBRATION","Engine vibration","number",ConvertType("uint32"),true,false)},
            {"GENERAL ENG ANTI ICE POSITION",new SimVarDefinition("GENERAL ENG ANTI ICE POSITION","Engine anti-ice switch","bool",ConvertType("float64"),true,false)},
            {"GENERAL ENG COMBUSTION",new SimVarDefinition("GENERAL ENG COMBUSTION","Combustion flag","bool",ConvertType("bool"),false,true)},
            {"GENERAL ENG COMBUSTION SOUND PERCENT",new SimVarDefinition("GENERAL ENG COMBUSTION SOUND PERCENT","Percent of maximum engine sound","percent",ConvertType("float64"),true,false)},
            {"GENERAL ENG DAMAGE PERCENT",new SimVarDefinition("GENERAL ENG DAMAGE PERCENT","Percent of total engine damage","percent",ConvertType("float64"),true,false)},
            {"GENERAL ENG ELAPSED TIME",new SimVarDefinition("GENERAL ENG ELAPSED TIME","Total engine elapsed time","hours",ConvertType("float64"),true,false)},
            {"GENERAL ENG EXHAUST GAS TEMPERATURE",new SimVarDefinition("GENERAL ENG EXHAUST GAS TEMPERATURE","Engine exhaust gas temperature.","rankine",ConvertType("float64"),false,false)},
            {"GENERAL ENG FAILED",new SimVarDefinition("GENERAL ENG FAILED","Fail flag","bool",ConvertType("bool"),true,false)},
            {"GENERAL ENG FUEL PRESSURE",new SimVarDefinition("GENERAL ENG FUEL PRESSURE","Engine fuel pressure","psi",ConvertType("float64"),false,false)},
            {"GENERAL ENG FUEL PUMP ON",new SimVarDefinition("GENERAL ENG FUEL PUMP ON","Fuel pump on/off","bool",ConvertType("bool"),true,false)},
            {"GENERAL ENG FUEL PUMP SWITCH",new SimVarDefinition("GENERAL ENG FUEL PUMP SWITCH","Fuel pump switch","bool",ConvertType("bool"),true,true)},
            {"GENERAL ENG FUEL USED SINCE START",new SimVarDefinition("GENERAL ENG FUEL USED SINCE START","Fuel used since the engines were last started","pounds",null,true,false)},
            {"GENERAL ENG FUEL VALVE",new SimVarDefinition("GENERAL ENG FUEL VALVE","Fuel valve state","bool",ConvertType("bool"),true,true)},
            {"GENERAL ENG GENERATOR ACTIVE",new SimVarDefinition("GENERAL ENG GENERATOR ACTIVE","Alternator (generator) on/off","bool",ConvertType("bool"),false,false)},
            {"GENERAL ENG GENERATOR SWITCH",new SimVarDefinition("GENERAL ENG GENERATOR SWITCH","Alternator (generator) switch","bool",ConvertType("bool"),true,false)},
            {"GENERAL ENG MASTER ALTERNATOR",new SimVarDefinition("GENERAL ENG MASTER ALTERNATOR","Alternator (generator) switch","bool",ConvertType("bool"),true,true)},
            {"GENERAL ENG MAX REACHED RPM",new SimVarDefinition("GENERAL ENG MAX REACHED RPM","Maximum attained rpm","rpm",ConvertType("float64"),true,false)},
            {"GENERAL ENG MIXTURE LEVER POSITION",new SimVarDefinition("GENERAL ENG MIXTURE LEVER POSITION","Percent of max mixture lever position","percent",ConvertType("float64"),false,true)},
            {"GENERAL ENG OIL LEAKED PERCENT",new SimVarDefinition("GENERAL ENG OIL LEAKED PERCENT","Percent of max oil capacity leaked","percent",ConvertType("float64"),true,false)},
            {"GENERAL ENG OIL PRESSURE",new SimVarDefinition("GENERAL ENG OIL PRESSURE","Engine oil pressure","psf",ConvertType("float64"),false,false)},
            {"GENERAL ENG OIL TEMPERATURE",new SimVarDefinition("GENERAL ENG OIL TEMPERATURE","Engine oil temperature","rankine",ConvertType("float64"),false,false)},
            {"GENERAL ENG PCT MAX RPM",new SimVarDefinition("GENERAL ENG PCT MAX RPM","Was already present in FSX, but is now settable","percent",null,true,false)},
            {"GENERAL ENG PROPELLER LEVER POSITION",new SimVarDefinition("GENERAL ENG PROPELLER LEVER POSITION","Percent of max prop lever position","percent",ConvertType("float64"),false,true)},
            {"GENERAL ENG RPM",new SimVarDefinition("GENERAL ENG RPM","Was already present in FSX, but is now settable","rpm",ConvertType("float64"),true,false)},
            {"GENERAL ENG STARTER",new SimVarDefinition("GENERAL ENG STARTER","Engine starter on/off","bool",ConvertType("bool"),true,false)},
            {"GENERAL ENG STARTER ACTIVE",new SimVarDefinition("GENERAL ENG STARTER ACTIVE","True if engine starter is active","bool",null,true,false)},
            {"GENERAL ENG THROTTLE LEVER POSITION",new SimVarDefinition("GENERAL ENG THROTTLE LEVER POSITION","Percent of max throttle position","percent",ConvertType("float64"),false,true)},
            {"GENERAL ENG THROTTLE MANAGED MODE",new SimVarDefinition("GENERAL ENG THROTTLE MANAGED MODE","Current mode of the managed throttle","number",ConvertType("float64"),true,false)},
            {"MASTER IGNITION SWITCH",new SimVarDefinition("MASTER IGNITION SWITCH","Aircraft master ignition switch (grounds all engines magnetos)","bool",ConvertType("bool"),true,false)},
            {"NUMBER OF ENGINES",new SimVarDefinition("NUMBER OF ENGINES","Number of engines (minimum 0, maximum 4)","number",ConvertType("uint16"),true,false)},
            {"PANEL AUTO FEATHER SWITCH",new SimVarDefinition("PANEL AUTO FEATHER SWITCH","Auto-feather arming switch","bool",ConvertType("bool"),true,false)},
            {"PROP AUTO FEATHER ARMED",new SimVarDefinition("PROP AUTO FEATHER ARMED","Auto-feather armed state","bool",ConvertType("bool"),true,false)},
            {"PROP BETA",new SimVarDefinition("PROP BETA","Prop blade pitch angle","radians",ConvertType("float64"),true,false)},
            {"PROP DEICE SWITCH",new SimVarDefinition("PROP DEICE SWITCH","True if prop deice switch on","bool",ConvertType("bool"),true,false)},
            {"PROP FEATHERED",new SimVarDefinition("PROP FEATHERED","Feathered state","bool",ConvertType("bool"),true,false)},
            {"PROP FEATHERING INHIBIT",new SimVarDefinition("PROP FEATHERING INHIBIT","Feathering inhibit flag","bool",ConvertType("bool"),true,false)},
            {"PROP FEATHER SWITCH",new SimVarDefinition("PROP FEATHER SWITCH","Prop feather switch","bool",ConvertType("bool"),true,false)},
            {"PROP MAX RPM PERCENT",new SimVarDefinition("PROP MAX RPM PERCENT","Percent of max rated rpm","percent",ConvertType("float64"),true,false)},
            {"PROP RPM",new SimVarDefinition("PROP RPM","Propeller rpm","rpm",ConvertType("float64"),false,false)},
            {"PROP SYNC ACTIVE",new SimVarDefinition("PROP SYNC ACTIVE","True if prop sync is active","bool",ConvertType("bool"),true,false)},
            {"PROP SYNC DELTA LEVER",new SimVarDefinition("PROP SYNC DELTA LEVER","Corrected prop correction input on slaved engine","position",ConvertType("float64"),true,false)},
            {"PROP THRUST",new SimVarDefinition("PROP THRUST","Propeller thrust","pounds",ConvertType("float64"),true,false)},
            {"RECIP CARBURETOR TEMPERATURE",new SimVarDefinition("RECIP CARBURETOR TEMPERATURE","Carburetor temperature","celsius",null,false,false)},
            {"RECIP ENG ALTERNATE AIR POSITION",new SimVarDefinition("RECIP ENG ALTERNATE AIR POSITION","Alternate air control","position",ConvertType("float64"),false,false)},
            {"RECIP ENG BRAKE POWER",new SimVarDefinition("RECIP ENG BRAKE POWER","Brake power produced by engine","foot pounds per second",ConvertType("float64"),false,false)},
            {"RECIP ENG COOLANT RESERVOIR PERCENT",new SimVarDefinition("RECIP ENG COOLANT RESERVOIR PERCENT","Percent coolant available","percent",ConvertType("float64"),false,false)},
            {"RECIP ENG COWL FLAP POSITION",new SimVarDefinition("RECIP ENG COWL FLAP POSITION","Percent cowl flap opened","percent",ConvertType("float64"),false,true)},
            {"RECIP ENG CYLINDER HEAD TEMPERATURE",new SimVarDefinition("RECIP ENG CYLINDER HEAD TEMPERATURE","Engine cylinder head temperature","celsius",ConvertType("float64"),false,false)},
            {"RECIP ENG EMERGENCY BOOST ACTIVE",new SimVarDefinition("RECIP ENG EMERGENCY BOOST ACTIVE","War emergency power active","bool",ConvertType("bool"),false,false)},
            {"RECIP ENG EMERGENCY BOOST ELAPSED TIME",new SimVarDefinition("RECIP ENG EMERGENCY BOOST ELAPSED TIME","Elapsed time war emergency power active","hours",ConvertType("float64"),false,false)},
            {"RECIP ENG FUEL AVAILABLE",new SimVarDefinition("RECIP ENG FUEL AVAILABLE","True if fuel is available","bool",ConvertType("bool"),false,false)},
            {"RECIP ENG FUEL FLOW",new SimVarDefinition("RECIP ENG FUEL FLOW","Engine fuel flow","pounds per hour",ConvertType("float64"),false,false)},
            {"RECIP ENG FUEL NUMBER TANKS USED",new SimVarDefinition("RECIP ENG FUEL NUMBER TANKS USED","Number of tanks currently being used","number",ConvertType("uint32"),true,false)},
            {"RECIP ENG FUEL TANKS USED",new SimVarDefinition("RECIP ENG FUEL TANKS USED","Fuel tanks used, one or more of the following bit flags:[index]","mask",ConvertType("flags"),false,false)},
            {"RECIP ENG FUEL TANK SELECTOR",new SimVarDefinition("RECIP ENG FUEL TANK SELECTOR","Fuel tank selected for engine. See fuel tank list.","enum",ConvertType("enum"),true,false)},
            {"RECIP ENG LEFT MAGNETO",new SimVarDefinition("RECIP ENG LEFT MAGNETO","Left magneto state","bool",ConvertType("bool"),false,true)},
            {"RECIP ENG MANIFOLD PRESSURE",new SimVarDefinition("RECIP ENG MANIFOLD PRESSURE","Engine manifold pressure","psi",ConvertType("float64"),false,false)},
            {"RECIP ENG PRIMER",new SimVarDefinition("RECIP ENG PRIMER","Engine primer position","bool",ConvertType("float64"),false,false)},
            {"RECIP ENG RADIATOR TEMPERATURE",new SimVarDefinition("RECIP ENG RADIATOR TEMPERATURE","Engine radiator temperature","celsius",ConvertType("float64"),false,false)},
            {"RECIP ENG RIGHT MAGNETO",new SimVarDefinition("RECIP ENG RIGHT MAGNETO","Right magneto state","bool",ConvertType("bool"),false,true)},
            {"RECIP ENG STARTER TORQUE",new SimVarDefinition("RECIP ENG STARTER TORQUE","Torque produced by engine","foot pound",ConvertType("float64"),false,false)},
            {"RECIP ENG TURBINE INLET TEMPERATURE",new SimVarDefinition("RECIP ENG TURBINE INLET TEMPERATURE","Engine turbine inlet temperature","celsius",ConvertType("float64"),false,false)},
            {"RECIP ENG TURBOCHARGER FAILED",new SimVarDefinition("RECIP ENG TURBOCHARGER FAILED","Turbo failed state","bool",ConvertType("bool"),false,false)},
            {"RECIP ENG WASTEGATE POSITION",new SimVarDefinition("RECIP ENG WASTEGATE POSITION","Percent turbo waste gate closed","percent",ConvertType("float64"),false,false)},
            {"RECIP MIXTURE RATIO",new SimVarDefinition("RECIP MIXTURE RATIO","Fuel / Air mixture ratio","ratio",null,false,false)},
            {"THROTTLE LOWER LIMIT",new SimVarDefinition("THROTTLE LOWER LIMIT","Percent throttle defining lower limit (negative for reverse thrust equipped airplanes)","percent",ConvertType("sint16"),true,false)},
            {"TURB ENG AFTERBURNER",new SimVarDefinition("TURB ENG AFTERBURNER","Afterburner state","bool",ConvertType("bool"),true,false)},
            {"TURB ENG AFTERBURNER PCT ACTIVE",new SimVarDefinition("TURB ENG AFTERBURNER PCT ACTIVE","The percentage that the afterburner is running at.","percent_over_100",ConvertType("float64"),true,false)},
            {"TURB ENG AFTERBURNER STAGE ACTIVE",new SimVarDefinition("TURB ENG AFTERBURNER STAGE ACTIVE","The stage of the afterburner, or 0 if the afterburner is not active.","number",ConvertType("uint32"),true,false)},
            {"TURB ENG BLEED AIR",new SimVarDefinition("TURB ENG BLEED AIR","Bleed air pressure","psi",ConvertType("float64"),true,false)},
            {"TURB ENG COMMANDED N1",new SimVarDefinition("TURB ENG COMMANDED N1","Turbine engine effective commanded N1","percent",ConvertType("float64"),false,true)},
            {"TURB ENG CORRECTED FF",new SimVarDefinition("TURB ENG CORRECTED FF","Corrected fuel flow","pounds per hour",ConvertType("float64"),false,false)},
            {"TURB ENG CORRECTED N1",new SimVarDefinition("TURB ENG CORRECTED N1","Turbine engine corrected N1","percent",ConvertType("float64"),false,true)},
            {"TURB ENG CORRECTED N2",new SimVarDefinition("TURB ENG CORRECTED N2","Turbine engine corrected N2","percent",ConvertType("float64"),false,true)},
            {"TURB ENG FREE TURBINE TORQUE",new SimVarDefinition("TURB ENG FREE TURBINE TORQUE","Free turbine torque","foot pound",ConvertType("float64"),false,false)},
            {"TURB ENG FUEL AVAILABLE",new SimVarDefinition("TURB ENG FUEL AVAILABLE","True if fuel is available","bool",ConvertType("bool"),true,false)},
            {"TURB ENG FUEL FLOW PPH",new SimVarDefinition("TURB ENG FUEL FLOW PPH","Engine fuel flow","pounds per hour",ConvertType("float64"),true,false)},
            {"TURB ENG IGNITION SWITCH",new SimVarDefinition("TURB ENG IGNITION SWITCH","True if the turbine engine ignition switch is on","bool",null,true,false)},
            {"TURB ENG ITT",new SimVarDefinition("TURB ENG ITT","Engine ITT","rankine",ConvertType("float64"),false,false)},
            {"TURB ENG JET THRUST",new SimVarDefinition("TURB ENG JET THRUST","Engine jet thrust","pounds",ConvertType("float64"),true,false)},
            {"TURB ENG MASTER STARTER SWITCH",new SimVarDefinition("TURB ENG MASTER STARTER SWITCH","True if the turbine engine master starter switch is on","bool",null,true,false)},
            {"TURB ENG MAX TORQUE PERCENT",new SimVarDefinition("TURB ENG MAX TORQUE PERCENT","Percent of max rated torque","percent",ConvertType("float64"),false,false)},
            {"TURB ENG N1",new SimVarDefinition("TURB ENG N1","Turbine engine N1","percent",ConvertType("float64"),false,true)},
            {"TURB ENG N2",new SimVarDefinition("TURB ENG N2","Turbine engine N2","percent",ConvertType("float64"),false,true)},
            {"TURB ENG NUM TANKS USED",new SimVarDefinition("TURB ENG NUM TANKS USED","Number of tanks currently being used","number",ConvertType("uint32"),true,false)},
            {"TURB ENG PRESSURE RATIO",new SimVarDefinition("TURB ENG PRESSURE RATIO","Engine pressure ratio","ratio",ConvertType("float64"),false,false)},
            {"TURB ENG PRIMARY NOZZLE PERCENT",new SimVarDefinition("TURB ENG PRIMARY NOZZLE PERCENT","Percent thrust of primary nozzle","percent over 100",ConvertType("float64"),true,false)},
            {"TURB ENG REVERSE NOZZLE PERCENT",new SimVarDefinition("TURB ENG REVERSE NOZZLE PERCENT","Percent thrust reverser nozzles deployed","percent",ConvertType("float64"),true,false)},
            {"TURB ENG TANKS USED",new SimVarDefinition("TURB ENG TANKS USED","Fuel tanks used, one or more of the following bit flags:[index]","mask",ConvertType("sint32"),true,false)},
            {"TURB ENG TANK SELECTOR",new SimVarDefinition("TURB ENG TANK SELECTOR","Fuel tank selected for engine. See fuel tank list.","enum",ConvertType("sint32"),true,false)},
            {"TURB ENG THROTTLE COMMANDED N1",new SimVarDefinition("TURB ENG THROTTLE COMMANDED N1","Turbine engine commanded N1 for current throttle position","percent",ConvertType("float64"),false,true)},
            {"TURB ENG VIBRATION",new SimVarDefinition("TURB ENG VIBRATION","Engine vibration value","number",ConvertType("float64"),true,false)},
            {"AUTOPILOT AIRSPEED ACQUISITION",new SimVarDefinition("AUTOPILOT AIRSPEED ACQUISITION","","units_bool",ConvertType("bool"),true,false)},
            {"AUTOPILOT AIRSPEED HOLD CURRENT",new SimVarDefinition("AUTOPILOT AIRSPEED HOLD CURRENT","","units_bool",ConvertType("bool"),true,false)},
            {"AUTOPILOT AIRSPEED MAX CALCULATED",new SimVarDefinition("AUTOPILOT AIRSPEED MAX CALCULATED","","units_knots",ConvertType("float64"),true,false)},
            {"AUTOPILOT AIRSPEED MIN CALCULATED",new SimVarDefinition("AUTOPILOT AIRSPEED MIN CALCULATED","","units_knots",ConvertType("float64"),true,false)},
            {"AUTOPILOT ALTITUDE MANUALLY TUNABLE",new SimVarDefinition("AUTOPILOT ALTITUDE MANUALLY TUNABLE","","units_bool",ConvertType("bool"),true,false)},
            {"AUTOPILOT CRUISE SPEED HOLD",new SimVarDefinition("AUTOPILOT CRUISE SPEED HOLD","","units_bool",ConvertType("bool"),true,false)},
            {"AUTOPILOT FLIGHT LEVEL CHANGE",new SimVarDefinition("AUTOPILOT FLIGHT LEVEL CHANGE","Boolean, toggles the autopilote Flight Level Change mode","",null,true,false)},
            {"AUTOPILOT HEADING MANUALLY TUNABLE",new SimVarDefinition("AUTOPILOT HEADING MANUALLY TUNABLE","","units_bool",ConvertType("bool"),true,false)},
            {"AUTOPILOT MAX SPEED HOLD",new SimVarDefinition("AUTOPILOT MAX SPEED HOLD","","units_bool",ConvertType("bool"),true,false)},
            {"AUTOPILOT SPEED SETTING",new SimVarDefinition("AUTOPILOT SPEED SETTING","","units_knots",ConvertType("float64"),true,false)},
            {"BOMB AMMO",new SimVarDefinition("BOMB AMMO","","units_number",ConvertType("float64"),true,false)},
            {"CANNON AMMO",new SimVarDefinition("CANNON AMMO","","units_number",ConvertType("float64"),true,false)},
            {"GUN AMMO",new SimVarDefinition("GUN AMMO","","units_number",ConvertType("float64"),true,false)},
            {"ROCKET AMMO",new SimVarDefinition("ROCKET AMMO","","units_number",ConvertType("float64"),true,false)},
            {"BLAST SHIELD POSITION",new SimVarDefinition("BLAST SHIELD POSITION","Indexed from 1, 100 is fully deployed, 0flat on deck","percent_over_100",ConvertType("float64"),true,false)},
            {"CABLE CAUGHT BY TAILHOOK",new SimVarDefinition("CABLE CAUGHT BY TAILHOOK","A number 1 through 4 for the cable number caught by the tailhook. Cable 1 is the one closest to the stern of the carrier. A value of 0 indicates no cable was caught.","number",ConvertType("bool"),true,false)},
            {"CATAPULT STROKE POSITION",new SimVarDefinition("CATAPULT STROKE POSITION","Catapults are indexed from 1. This value will be 0 before the catapult fires, and then up to 100 as the aircraft is propelled down the catapult. The aircraft may takeoff before the value reaches 100 (depending on the aircraft weight, power applied, and other factors), in which case this value will not be further updated. This value could be used to drive a bogie animation.","number",ConvertType("float64"),true,false)},
            {"HOLDBACK BAR INSTALLED",new SimVarDefinition("HOLDBACK BAR INSTALLED","Holdback bars allow build up of thrustbefore takeoff from a catapult, and are installed by the deck crew of an aircraft carrier.","bool",ConvertType("bool"),true,false)},
            {"LAUNCHBAR HELD EXTENDED",new SimVarDefinition("LAUNCHBAR HELD EXTENDED","This will be True if the launchbar is fully extended, and can be used, for example, to change the color of an instrument light.","bool",ConvertType("bool"),true,false)},
            {"LAUNCHBAR POSITION",new SimVarDefinition("LAUNCHBAR POSITION","Installed on aircraft before takeoff from a carrier catapult. Note that gear cannot retract with this extended. 100 = fully extended. Refer to the document Notes on Aircraft Systems.","percent_over_100",ConvertType("float64"),true,false)},
            {"LAUNCHBAR SWITCH",new SimVarDefinition("LAUNCHBAR SWITCH","If this is set to True the launch bar switch has been engaged.","bool",ConvertType("bool"),true,false)},
            {"NUMBER OF CATAPULTS",new SimVarDefinition("NUMBER OF CATAPULTS","Maximum of 4. A model can contain more than 4 catapults, but only the first four will be read and recognized by the simulation.","number",ConvertType("uint32"),true,false)},
            {"SURFACE RELATIVE GROUND SPEED",new SimVarDefinition("SURFACE RELATIVE GROUND SPEED","The speed of the aircraft relative to the speed of the first surface directly underneath it. Use this to retrieve, for example, an aircraft’s taxiing speed while it is moving on a moving carrier. It also applies to airborne aircraft, for example when a helicopter is successfully hovering above a moving ship, this value should be zero. The returned value will be the same as GROUND VELOCITY if the first surface beneath it is not moving.","feet_per_second",null,true,false)},
            {"TAILHOOK HANDLE",new SimVarDefinition("TAILHOOK HANDLE","True if the tailhook handle is engaged.","bool",ConvertType("bool"),true,false)}
        };

        private static Type ConvertType(string simVarType)
        {
            var result = simVarType;
            switch (simVarType?.ToLower())
            {
                case "float64":
                case "uif32":
                    result = "System.Double";
                    break;
                case "uint16":
                case "bcd16":
                case "bco16":
                case "enum8":
                    result = "System.UInt16";
                    break;
                case "uint":
                case "uint32":
                case "var32":
                case "enum":
                    result = "System.UInt32";
                    break;
                case "uint64":
                    result = "System.UInt64";
                    break;
                case "sint16":
                    result = "System.Int16";
                    break;
                case "angl16":
                case "sint":
                case "sint8":
                case "sint32":
                    result = "System.Int32";
                    break;
                case "bool":
                case "bool8":
                case "bool16":
                case "bool32":
                    result = "System.Boolean";
                    break;
                case "flags":
                case "flags8":
                    result = "System.Byte";
                    break;
                case "string":
                    result = "System.String";
                    break;
            }
            if (result == null && (bool)simVarType?.Contains("string"))
                result = "System.String";
            return Type.GetType(result);
        }

        public static SIMCONNECT_DATATYPE GetSimVarType(string type)
        {
            SIMCONNECT_DATATYPE result;
            switch (type)
            {
                case null:
                    result = SIMCONNECT_DATATYPE.INVALID;
                    break;
                case "System.Double":
                    result = SIMCONNECT_DATATYPE.FLOAT64;
                    break;
                case "System.Int16":
                case "System.Int32":
                case "System.UInt16":
                case "System.UInt32":
                    result = SIMCONNECT_DATATYPE.INT32;
                    break;
                case "System.UInt64":
                    result = SIMCONNECT_DATATYPE.INT64;
                    break;
                case "System.Boolean":
                    result = SIMCONNECT_DATATYPE.INT32;
                    break;
                case "System.Byte":
                    result = SIMCONNECT_DATATYPE.INT32;
                    break;
                case "variable length string":
                    result = SIMCONNECT_DATATYPE.STRINGV;
                    break;
                default:
                    result = SIMCONNECT_DATATYPE.STRING256;
                    break;
            }
            return result;
        }
    }
}
